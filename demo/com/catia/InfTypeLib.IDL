// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: InfTypeLib.tlb

[
  uuid(14F197B2-0771-11D1-A5B1-00A0C9575177),
  version(0.0),
  helpstring("CATIA V5 InfInterfaces Object Library")
]
library INFITF
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface CATBaseUnknown;
    interface CATBaseDispatch;
    interface ModelElement;
    interface Document;
    interface AnyObject;
    interface Application;
    interface Documents;
    interface Collection;
    interface Windows;
    interface Window;
    interface Viewer;
    interface Camera;
    interface Viewers;
    interface PageSetup;
    interface Printers;
    interface Printer;
    interface FileSystem;
    interface Folder;
    interface FileComponent;
    interface Files;
    interface File;
    interface TextStream;
    interface Folders;
    interface SystemService;
    interface Batch;
    interface BatchElement;
    interface BatchElements;
    interface BatchLog;
    interface BatchOutput;
    interface Mail;
    interface Recipients;
    interface Attachments;
    interface SendToService;
    interface Settings;
    interface Setting;
    interface SettingControllers;
    interface SettingController;
    interface SystemConfiguration;
    interface Cameras;
    interface Selection;
    interface VisPropertySet;
    interface SelectedElement;
    interface Reference;
    interface Workbench;
    interface References;
    interface LightSources;
    interface LightSource;
    interface SpecsAndGeomWindow;
    interface SpecsViewer;
    interface Viewer2D;
    interface Viewpoint2D;
    interface Viewpoint3D;
    interface Viewer3D;
    interface VrmlSettingAtt;
    interface VisualizationSettingAtt;
    interface TreeVizManipSettingAtt;
    interface SearchSettingAtt;
    interface PrintersSettingAtt;
    interface MemoryWarningSettingAtt;
    interface MacrosSettingAtt;
    interface LicenseSettingAtt;
    interface GlobalStatisticsSettingAtt;
    interface GeneralStatisticsSettingAtt;
    interface WorkbenchStatisticsSettingAtt;
    interface SessionStatisticsSettingAtt;
    interface ServerStatisticsSettingAtt;
    interface PCSStatisticsSettingAtt;
    interface ErrorlogStatisticsSettingAtt;
    interface CommandStatisticsSettingAtt;
    interface AccesslogStatisticsSettingAtt;
    interface GeneralSessionSettingAtt;
    interface DynLicenseSettingAtt;
    interface DocumentationSettingAtt;
    interface DisconnectionSettingAtt;
    interface DLNameSettingAtt;
    interface CacheSettingAtt;
    interface CGRAdhesionSettingAtt;
    interface SelectionSets;
    interface DraftingPageSetup;
    interface Move;
    interface Position;
    interface Camera3D;
    interface Camera2D;

    typedef [helpcontext(0x000003f8)]
    enum {
        CatFileSelectionModeOpen = 0,
        CatFileSelectionModeSave = 1
    } CatFileSelectionMode;
    
    typedef [helpcontext(0x000003f3)]
    enum {
        catArrangeCascade = 0,
        catArrangeTiledHorizontal = 1,
        catArrangeTiledVertical = 2
    } CatArrangeStyle;
    
    

    typedef [helpcontext(0x00000411)]
    enum {
        catWindowStateMaximized = 0,
        catWindowStateMinimized = 1,
        catWindowStateNormal = 2
    } CatWindowState;

    typedef [helpcontext(0x000003f6)]
    enum {
        catCaptureFormatCGM = 0,
        catCaptureFormatEMF = 1,
        catCaptureFormatTIFF = 2,
        catCaptureFormatTIFFGreyScale = 3,
        catCaptureFormatBMP = 4,
        catCaptureFormatJPEG = 5
    } CatCaptureFormat;
    
    typedef [helpcontext(0x000003f5)]
    enum {
        catCamera2D = 0,
        catCamera3D = 1
    } CatCameraType;
    
    typedef [helpcontext(0x000003fe)]
    enum {
        catPaperLetter = 0,
        catPaperLegal = 1,
        catPaperA0 = 2,
        catPaperA1 = 3,
        catPaperA2 = 4,
        catPaperA3 = 5,
        catPaperA4 = 6,
        catPaperA = 7,
        catPaperB = 8,
        catPaperC = 9,
        catPaperD = 10,
        catPaperE = 11,
        catPaperF = 12,
        catPaperUser = 13
    } CatPaperSize;

    typedef [helpcontext(0x000003fd)]
    enum {
        catPaperPortrait = 0,
        catPaperLandscape = 1,
        catPaperBestFit = 2
    } CatPaperOrientation;

    typedef [helpcontext(0x000003f9)]
    enum {
        catImageNoRotation = 0,
        catImageRotation90 = 1,
        catImageRotation180 = 2,
        catImageRotation270 = 3,
        catImageBestRotation = 4
    } CatImageRotation;

    typedef [helpcontext(0x000003f4)]
    enum {
        catBannerPositionNone = 0,
        catBannerPositionBottom = 1,
        catBannerPositionTop = 2,
        catBannerPositionLeft = 3,
        catBannerPositionRight = 4
    } CatBannerPosition;

    typedef [helpcontext(0x00000400)]
    enum {
        catPrintQualityDraft = 0,
        catPrintQualityLow = 1,
        catPrintQualityMedium = 2,
        catPrintQualityHigh = 3,
        catPrintQualityCustom = 4
    } CatPrintQuality;

    typedef [helpcontext(0x000003ff)]
    enum {
        catColorTrueColor = 0,
        catColorGreyScale = 1,
        catColorMonochrome = 2
    } CatPrintColor;

    typedef [helpcontext(0x00000401)]
    enum {
        catPrintRenderingModeDefault = 0,
        catPrintRenderingModeWireframe = 1,
        catPrintRenderingModeHiddenLineRemoval = 2,
        catPrintRenderingModeShadingWithTriangles = 3,
        catPrintRenderingModeDynamicHiddenLineRemoval = 4,
        catPrintRenderingModeOnScreen = 5
    } CatPrintRenderingMode;
    
    typedef [helpcontext(0x00000406)]
    enum {
        catScriptLibraryTypeDocument = 0,
        catScriptLibraryTypeDirectory = 1,
        catScriptLibraryTypeVBAProject = 2
    } CatScriptLibraryType;

    typedef [helpcontext(0x000003f0)]
    enum {
        CATVBScriptLanguage = 0,
        CATVBALanguage = 1,
        CATBasicScriptLanguage = 2,
        CATJavaLanguage = 3,
        CATJScriptLanguage = 4
    } CATScriptLanguage;
    
    typedef [helpcontext(0x00000404)]
    enum {
        catRecipientTo = 0,
        catRecipientCopy = 1,
        catRecipientBlindCopy = 2
    } CatRecipientType;
    
    
    typedef [helpcontext(0x000003fb)]
    enum {
        catDisplayClientUI = 0,
        catNoUI = 1
    } CatMailUIPolicy;
    
    typedef [helpcontext(0x0000040f)]
    enum {
        catVisPropertyDefined = 0,
        catVisPropertyUnDefined = 1
    } CatVisPropertyStatus;

    typedef [helpcontext(0x00000410)]
    enum {
        catVisPropertyLineType = 0,
        catVisPropertyWidth = 1,
        catVisPropertyColor = 2,
        catVisPropertyOpacity = 3
    } CatVisPropertyType;

    typedef [helpcontext(0x0000040e)]
    enum {
        catVisPropertyShowAttr = 0,
        catVisPropertyNoShowAttr = 1
    } CatVisPropertyShow;

    typedef [helpcontext(0x0000040d)]
    enum {
        catVisPropertyPickAttr = 0,
        catVisPropertyNoPickAttr = 1
    } CatVisPropertyPick;

    typedef [helpcontext(0x0000040c)]
    enum {
        catVisLayerBasic = 0,
        catVisLayerNone = 1
    } CatVisLayerType;
    
     typedef [helpcontext(0x000003ef)]
    enum {
        CATMonoSel = 0,
        CATMultiSelTriggWhenSelPerf = 1,
        CATMultiSelTriggWhenUserValidatesSelection = 2
    } CATMultiSelectionMode;
    
    typedef [helpcontext(0x00000408)]
    enum {
        catSpecsViewerHorizontalIndented = 0,
        catSpecsViewerHorizontalUp = 1,
        catSpecsViewerHorizontalCentered = 2,
        catSpecsViewerVerticalCentered = 3,
        catSpecsViewerHorizontalRelational = 4,
        catSpecsViewerVerticalRelational = 5
    } CatSpecsLayout;

    typedef [helpcontext(0x00000407)]
    enum {
        catWindowSpecsOnly = 0,
        catWindowGeomOnly = 1,
        catWindowSpecsAndGeom = 2
    } CatSpecsAndGeomWindowLayout;
    
    typedef [helpcontext(0x00000403)]
    enum {
        catProjectionConic = 0,
        catProjectionCylindric = 1,
        catProjectionUndefined = 2
    } CatProjectionMode;
    
    typedef [helpcontext(0x000003fa)]
    enum {
        catInfiniteLightSource = 0,
        catNeonLightSource = 1
    } CatLightingMode;

    typedef [helpcontext(0x000003fc)]
    enum {
        catNavigationExamine = 0,
        catNavigationWalk = 1,
        catNavigationFly = 2
    } CatNavigationStyle;

    typedef [helpcontext(0x00000405)]
    enum {
        catRenderShading = 0,
        catRenderShadingWithEdges = 1,
        catRenderWireFrame = 2,
        catRenderHiddenLinesRemoval = 3,
        catRenderQuickHiddenLinesRemoval = 4,
        catRenderMaterial = 5,
        catRenderMaterialWithEdges = 6,
        catRenderShadingWithEdgesAndHiddenEdges = 7,
        catRenderShadingWithEdgesWithoutSmoothEdges = 8,
        catRenderWireFrameWithoutSmoothEdgesWithoutVertices = 9,
        catRenderWireFrameWithHalfSmoothEdgesWithoutVertices = 10,
        catRenderShadingWithEdgesWithOutlines = 11,
        catRenderQuickHiddenLinesRemovalWithoutVertices = 12,
        catRenderQuickHiddenLinesRemovalWithHiddenEdgesWithOutlines = 13,
        catRenderQuickHiddenLinesRemovalWithHiddenEdgesWithOutlinesWithoutVertices = 14
    } CatRenderingMode;

    typedef [helpcontext(0x000003f7)]
    enum {
        catClippingModeClear = 0,
        catClippingModeNear = 1,
        catClippingModeFar = 2,
        catClippingModeNearAndFar = 3
    } CatClippingMode;
    
    typedef [helpcontext(0x000003eb)]
    enum {
        CATFSAAMode_Deactivated = 0,
        CATFSAAMode_2xSuperSampling = 1,
        CATFSAAMode_4xSuperSampling = 2,
        CATFSAAMode_8xSuperSampling = 3,
        CATFSAAMode_16xSuperSampling = 4
    } CATFullSceneAntiAliasingMode;

    typedef [helpcontext(0x000003e9)]
    enum {
        CATBackFaceCullingOnSolidFaces = 0,
        CATBackFaceCullingOnAllFaces = 1,
        CATBackFaceCullingOnStandAloneFaces = 2,
        CATBackFaceCullingOnNoFaces = 3
    } CATBackFaceCullingMode;
    
    typedef [helpcontext(0x0000040b)]
    enum {
        catTreeTypeClassical = 0,
        catTreeTypeStructural = 1,
        catTreeTypeHistorical = 2,
        catTreeTypeRelational = 3
    } CatTreeTypeEnum;

    typedef [helpcontext(0x00000409)]
    enum {
        catTreeOrientationVertical = 0,
        catTreeOrientationHorizontal = 1
    } CatTreeOrientationEnum;

    typedef [helpcontext(0x0000040a)]
    enum {
        catTreeSizeTypeFixedSize = 0,
        catTreeSizeTypeTextDependentSize = 1
    } CatTreeSizeTypeEnum;
    
    typedef [helpcontext(0x000003f1)]
    enum {
        Everywhere = 0,
        InWorkbench = 1,
        FromWorkbench = 2,
        FromSelection = 3,
        VisibleOnScreen = 4
    } CATSearchContextScope;
    
    typedef [helpcontext(0x00000402)]
    enum {
        CatPrinterDirFree = 0,
        CatPrinterDirProtect = 1
    } CatPrinterDirState;  
    
        typedef [helpcontext(0x000003ee)]
    enum {
        UIStyleP1 = 0,
        UIStyleP2 = 1,
        UIStyleP3 = 2
    } CATGenUIStyle;

    typedef [helpcontext(0x000003ed)]
    enum {
        NoAutoBackup = 0,
        AutoBackupEvery = 1,
        IncrBackup = 2
    } CATGenDataSave;

    typedef [helpcontext(0x000003ec)]
    enum {
        NetMeeting = 0,
        Backbone = 1
    } CATGenConferencing;
    
    typedef [helpcontext(0x000003ea)]
    enum {
        CATDocContextualTechDoc = 0,
        CATDocContextualUserComp = 1
    } CATDocContextualPriority;
    
    typedef [helpcontext(0x000003f2)]
    enum {
        ZeroDim = 0,
        MonoDim = 1,
        MonoDimInfinite = 2,
        RectilinearMonoDim = 3,
        RectilinearMonoDimInfinite = 4,
        BiDim = 5,
        BiDimInfinite = 6,
        PlanarBiDim = 7,
        PlanarBiDimInfinite = 8,
        CylindricalBiDim = 9,
        TriDim = 10
    } CATSelectionFilter;
    
    [
      odl,
      uuid(7BF8BE41-8074-0000-0280-020BCB000000),
      helpcontext(0x000009c4),
      dual,
      oleautomation
    ]
    interface CATBaseUnknown : IDispatch {
        [id(0x60020000), restricted, hidden, helpcontext(0x000009c5)]
        HRESULT Destructor();
        [id(0x60020001), restricted, hidden, helpcontext(0x000009c6)]
        HRESULT GetMetaObject();
        [id(0x60020002), restricted, hidden, helpcontext(0x000009c7)]
        HRESULT IsA();
        [id(0x60020003), restricted, hidden, helpcontext(0x000009c8)]
        HRESULT IsAKindOf();
        [id(0x60020004), restricted, hidden, helpcontext(0x000009c9)]
        HRESULT GetImpl();
        [id(0x60020005), restricted, hidden, helpcontext(0x000009ca)]
        HRESULT SetImpl();
        [id(0x60020006), restricted, hidden, helpcontext(0x000009cb)]
        HRESULT IsNull();
        [id(0x60020007), restricted, hidden, helpcontext(0x000009cc)]
        HRESULT IsEqual();
        [id(0x60020008), restricted, hidden, helpcontext(0x000009cd)]
        HRESULT SurChargeQI();
        [id(0x60020009), restricted, hidden, helpcontext(0x000009ce)]
        HRESULT ChangeComponentState();
    };

    [
      odl,
      uuid(7CDB17CA-91C1-0000-0280-020BCB000000),
      helpcontext(0x000007d0),
      dual,
      oleautomation
    ]
    interface CATBaseDispatch : CATBaseUnknown {
    };
    
    [
      odl,
      uuid(7A4B1870-C639-11D6-8055-0010B5FA1031),
      helpcontext(0x000059d8),
      dual,
      oleautomation
    ]
    interface ModelElement : CATBaseDispatch {
        [id(0x60040000), propget, helpcontext(0x000059d9)]
        HRESULT InternalName([out, retval] BSTR* ioInternalName);
        [id(0x60040001), propget, helpcontext(0x000059da)]
        HRESULT DisplayName([out, retval] BSTR* ioDisplayName);
        [id(0x60040001), propput, helpcontext(0x000059da)]
        HRESULT DisplayName([in] BSTR* ioDisplayName);
        [id(0x60040003), propget, helpcontext(0x000059db)]
        HRESULT Document([out, retval] Document** oDocument);
    };

    [
      odl,
      uuid(7FBD9D5A-CFBA-0000-0280-030BA6000000),
      helpcontext(0x000030d4),
      dual,
      oleautomation
    ]
    interface Document : AnyObject {
        [id(0x60050000), propget, helpcontext(0x000030d5)]
        HRESULT FullName([out, retval] BSTR* oFullNameBSTR);
        [id(0x60050001), propget, helpcontext(0x000030d6)]
        HRESULT Path([out, retval] BSTR* oPathBSTR);
        [id(0x60050002), propget, helpcontext(0x000030d7)]
        HRESULT ReadOnly([out, retval] VARIANT_BOOL* oReadOnly);
        [id(0x60050003), propget, helpcontext(0x000030d8)]
        HRESULT Saved([out, retval] VARIANT_BOOL* oSaved);
        [id(0x60050004), propget, helpcontext(0x000030d9)]
        HRESULT SeeHiddenElements([out, retval] VARIANT_BOOL* oSeeHiddenElements);
        [id(0x60050004), propput, helpcontext(0x000030d9)]
        HRESULT SeeHiddenElements([in] VARIANT_BOOL oSeeHiddenElements);
        [id(0x60050006), propget, helpcontext(0x000030da)]
        HRESULT Cameras([out, retval] Cameras** oCameras);
        [id(0x60050007), propget, helpcontext(0x000030db)]
        HRESULT Selection([out, retval] Selection** oSelection);
        [id(0x60050008), propget, helpcontext(0x000030dc)]
        HRESULT CurrentLayer([out, retval] BSTR* oCurrentLayer);
        [id(0x60050008), propput, helpcontext(0x000030dc)]
        HRESULT CurrentLayer([in] BSTR* oCurrentLayer);
        [id(0x6005000a), propget, helpcontext(0x000030dd)]
        HRESULT CurrentFilter([out, retval] BSTR* oCurrentFilter);
        [id(0x6005000a), propput, helpcontext(0x000030dd)]
        HRESULT CurrentFilter([in] BSTR* oCurrentFilter);
        [id(0x6005000c), helpcontext(0x000030de)]
        HRESULT CreateFilter(
                        [in] BSTR* iFilterName, 
                        [in] BSTR* iFilterDefinition);
        [id(0x6005000d), helpcontext(0x000030df)]
        HRESULT RemoveFilter([in] BSTR* iFilterName);
        [id(0x6005000e), helpcontext(0x000030e0)]
        HRESULT Indicate2D(
                        [in] BSTR* iMessage, 
                        [in, out] SAFEARRAY(VARIANT) ioDocumentWindowLocation, 
                        [out, retval] BSTR* oOutputState);
        [id(0x6005000f), helpcontext(0x000030e1)]
        HRESULT Indicate3D(
                        [in] AnyObject* iPlanarGeometricObject, 
                        [in] BSTR* iMessage, 
                        [in, out] SAFEARRAY(VARIANT) ioWindowLocation2D, 
                        [in, out] SAFEARRAY(VARIANT) ioWindowLocation3D, 
                        [out, retval] BSTR* oOutputState);
        [id(0x60050010), helpcontext(0x000030e2)]
        HRESULT CreateReferenceFromName(
                        [in] BSTR* iLabel, 
                        [out, retval] Reference** oRef);
        [id(0x60050011), helpcontext(0x000030e3)]
        HRESULT NewWindow([out, retval] Window** oWindow);
        [id(0x60050012), helpcontext(0x000030e4)]
        HRESULT Activate();
        [id(0x60050013), helpcontext(0x000030e5)]
        HRESULT Save();
        [id(0x60050014), helpcontext(0x000030e6)]
        HRESULT SaveAs([in] BSTR* fileName);
        [id(0x60050015), helpcontext(0x000030e7)]
        HRESULT ExportData(
                        [in] BSTR* fileName, 
                        [in] BSTR* format);
        [id(0x60050016), helpcontext(0x000030e8)]
        HRESULT Close();
        [id(0x60050017), helpcontext(0x000030e9)]
        HRESULT GetWorkbench(
                        [in] BSTR* workbenchName, 
                        [out, retval] Workbench** Workbench);
    };

    [
      odl,
      uuid(7FAFF68C-2E6A-0000-0280-020AEF000000),
      helpcontext(0x00001194),
      dual,
      oleautomation
    ]
    interface AnyObject : CATBaseDispatch {
        [id(0x60040000), propget, helpcontext(0x00001195)]
        HRESULT Application([out, retval] Application** oApplication);
        [id(0x60040001), propget, helpcontext(0x00001196)]
        HRESULT Parent([out, retval] CATBaseDispatch** oParent);
        [id(0x60040002), propget, helpcontext(0x00001197)]
        HRESULT Name([out, retval] BSTR* oNameBSTR);
        [id(0x60040002), propput, helpcontext(0x00001197)]
        HRESULT Name([in] BSTR* oNameBSTR);
        [id(0x60040004), helpcontext(0x00001198)]
        HRESULT GetItem(
                        [in] BSTR* IDName, 
                        [out, retval] CATBaseDispatch** RealObj);
    };

    [
      odl,
      uuid(7D2C8116-DC44-0000-0280-030BA6000000),
      helpcontext(0x00000dac),
      dual,
      oleautomation
    ]
    interface Application : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00000dad)]
        HRESULT Documents([out, retval] Documents** oDocuments);
        [id(0x60050001), propget, helpcontext(0x00000dae)]
        HRESULT ActiveDocument([out, retval] Document** oDocument);
        [id(0x60050002), propget, helpcontext(0x00000daf)]
        HRESULT Windows([out, retval] Windows** oWindows);
        [id(0x60050003), propget, helpcontext(0x00000db0)]
        HRESULT ActiveWindow([out, retval] Window** oWindow);
        [id(0x60050004), propget, helpcontext(0x00000db1)]
        HRESULT Printers([out, retval] Printers** oPrinters);
        [id(0x60050005), propget, helpcontext(0x00000db2)]
        HRESULT ActivePrinter([out, retval] Printer** oPrinter);
        [id(0x60050005), propput, helpcontext(0x00000db2)]
        HRESULT ActivePrinter([in] Printer* oPrinter);
        [id(0x60050007), propget, helpcontext(0x00000db3)]
        HRESULT FileSystem([out, retval] FileSystem** oFileSystem);
        [id(0x60050008), propget, helpcontext(0x00000db4)]
        HRESULT SystemService([out, retval] SystemService** oService);
        [id(0x60050009), propget, helpcontext(0x00000db5)]
        HRESULT FullName([out, retval] BSTR* oFullNameBSTR);
        [id(0x6005000a), propget, helpcontext(0x00000db6)]
        HRESULT Path([out, retval] BSTR* oPathBSTR);
        [id(0x6005000b), propget, helpcontext(0x00000db7)]
        HRESULT FileSearchOrder([out, retval] BSTR* oDefaultFilePathBSTR);
        [id(0x6005000b), propput, helpcontext(0x00000db7)]
        HRESULT FileSearchOrder([in] BSTR* oDefaultFilePathBSTR);
        [id(0x6005000d), propget, helpcontext(0x00000db8)]
        HRESULT LocalCache([out, retval] BSTR* oLocalCachePathBSTR);
        [id(0x6005000d), propput, helpcontext(0x00000db8)]
        HRESULT LocalCache([in] BSTR* oLocalCachePathBSTR);
        [id(0x6005000f), propget, helpcontext(0x00000db9)]
        HRESULT CacheSize([out, retval] long* oLocalCacheSize);
        [id(0x6005000f), propput, helpcontext(0x00000db9)]
        HRESULT CacheSize([in] long oLocalCacheSize);
        [id(0x60050011), propget, helpcontext(0x00000dba)]
        HRESULT Visible([out, retval] VARIANT_BOOL* oVisible);
        [id(0x60050011), propput, helpcontext(0x00000dba)]
        HRESULT Visible([in] VARIANT_BOOL oVisible);
        [id(0x60050013), propget, helpcontext(0x00000dbb)]
        HRESULT Interactive([out, retval] VARIANT_BOOL* oInteractive);
        [id(0x60050013), propput, helpcontext(0x00000dbb)]
        HRESULT Interactive([in] VARIANT_BOOL oInteractive);
        [id(0x60050015), propget, helpcontext(0x00000dbc)]
        HRESULT DisplayFileAlerts([out, retval] VARIANT_BOOL* oDisplayFileAlerts);
        [id(0x60050015), propput, helpcontext(0x00000dbc)]
        HRESULT DisplayFileAlerts([in] VARIANT_BOOL oDisplayFileAlerts);
        [id(0x60050017), propget, helpcontext(0x00000dbd)]
        HRESULT Caption([out, retval] BSTR* oCaptionBSTR);
        [id(0x60050017), propput, helpcontext(0x00000dbd)]
        HRESULT Caption([in] BSTR* oCaptionBSTR);
        [id(0x60050019), propget, helpcontext(0x00000dbe)]
        HRESULT StatusBar([out, retval] BSTR* oStatusBarBSTR);
        [id(0x60050019), propput, helpcontext(0x00000dbe)]
        HRESULT StatusBar([in] BSTR* oStatusBarBSTR);
        [id(0x6005001b), propget, helpcontext(0x00000dbf)]
        HRESULT Width([out, retval] float* oWidth);
        [id(0x6005001b), propput, helpcontext(0x00000dbf)]
        HRESULT Width([in] float oWidth);
        [id(0x6005001d), propget, helpcontext(0x00000dc0)]
        HRESULT Height([out, retval] float* oHeight);
        [id(0x6005001d), propput, helpcontext(0x00000dc0)]
        HRESULT Height([in] float oHeight);
        [id(0x6005001f), propget, helpcontext(0x00000dc1)]
        HRESULT Batch([out, retval] Batch** oBatch);
        [id(0x6005001f), propput, helpcontext(0x00000dc1)]
        HRESULT Batch([in] Batch* oBatch);
        [id(0x60050021), propget, helpcontext(0x00000dc2)]
        HRESULT Left([out, retval] float* oLeft);
        [id(0x60050021), propput, helpcontext(0x00000dc2)]
        HRESULT Left([in] float oLeft);
        [id(0x60050023), propget, helpcontext(0x00000dc3)]
        HRESULT Top([out, retval] float* oTop);
        [id(0x60050023), propput, helpcontext(0x00000dc3)]
        HRESULT Top([in] float oTop);
        [id(0x60050025), helpcontext(0x00000dc4)]
        HRESULT Help([in] BSTR* iHelpID);
        [id(0x60050026), helpcontext(0x00000dc5)]
        HRESULT Quit();
        [id(0x60050027), helpcontext(0x00000dc6)]
        HRESULT CreateMail([out, retval] Mail** oMail);
        [id(0x60050028), helpcontext(0x00000dc7)]
        HRESULT CreateSendTo([out, retval] SendToService** oMail);
        [id(0x60050029), helpcontext(0x00000dc8)]
        HRESULT MsgBox(
                        [in] BSTR* iPrompt, 
                        [in] short iButtons, 
                        [in] BSTR* iTitle, 
                        [in] BSTR* iHelpFile, 
                        [in] long iContext, 
                        [out, retval] short* oClickedButton);
        [id(0x6005002a), helpcontext(0x00000dc9)]
        HRESULT InputBox(
                        [in] BSTR* iPrompt, 
                        [in] BSTR* iTitle, 
                        [in] BSTR* iDefault, 
                        [in] short iXPos, 
                        [in] short iYPos, 
                        [in] BSTR* iHelpFile, 
                        [in] long iContext, 
                        [out, retval] BSTR* oInputText);
        [id(0x6005002b), helpcontext(0x00000dca)]
        HRESULT FileSelectionBox(
                        [in] BSTR* iTitle, 
                        [in] BSTR* iExtension, 
                        [in] CatFileSelectionMode iMode, 
                        [out, retval] BSTR* oFilePath);
        [id(0x6005002c), helpcontext(0x00000dcb)]
        HRESULT StartCommand([in] BSTR* iCommandId);
        [id(0x6005002d), helpcontext(0x00000dcc)]
        HRESULT StartWorkbench([in] BSTR* iworkbenchId);
        [id(0x6005002e), helpcontext(0x00000dcd)]
        HRESULT GetWorkbenchId([out, retval] BSTR* oworkbenchId);
        [id(0x6005002f), propget, helpcontext(0x00000dce)]
        HRESULT Settings([out, retval] Settings** oSettings);
        [id(0x60050030), propget, helpcontext(0x00000dcf)]
        HRESULT SettingControllers([out, retval] SettingControllers** oCtrl);
        [id(0x60050031), propget, helpcontext(0x00000dd0)]
        HRESULT SystemConfiguration([out, retval] SystemConfiguration** oConfiguration);
        [id(0x60050032), propget, helpcontext(0x00000dd1)]
        HRESULT RefreshDisplay([out, retval] VARIANT_BOOL* oRefreshIsEnabled);
        [id(0x60050032), propput, helpcontext(0x00000dd1)]
        HRESULT RefreshDisplay([in] VARIANT_BOOL oRefreshIsEnabled);
    };

    [
      odl,
      uuid(7FBD9BE6-3CBE-0000-0280-030BA6000000),
      helpcontext(0x000034bc),
      dual,
      oleautomation
    ]
    interface Documents : Collection {
        [id(0x60050000), helpcontext(0x000034bd)]
        HRESULT Add(
                        [in] BSTR* docType, 
                        [out, retval] Document** newDoc);
        [id(0x60050001), helpcontext(0x000034be)]
        HRESULT Item(
                        [in] VARIANT* iIndex, 
                        [out, retval] Document** oDocument);
        [id(0x60050002), helpcontext(0x000034bf)]
        HRESULT Open(
                        [in] BSTR* iFileName, 
                        [out, retval] Document** oDoc);
        [id(0x60050003), helpcontext(0x000034c0)]
        HRESULT Read(
                        [in] BSTR* iFileName, 
                        [out, retval] Document** oDoc);
        [id(0x60050004), helpcontext(0x000034c1)]
        HRESULT NewFrom(
                        [in] BSTR* iFileName, 
                        [out, retval] Document** oDoc);
    };

    [
      odl,
      uuid(91D1D553-495C-11D1-A26E-0000F87546FD),
      helpcontext(0x00002904),
      dual,
      oleautomation
    ]
    interface Collection : CATBaseDispatch {
        [id(0x60040000), propget, helpcontext(0x00002905)]
        HRESULT Application([out, retval] Application** oAppli);
        [id(0x60040001), propget, helpcontext(0x00002906)]
        HRESULT Parent([out, retval] CATBaseDispatch** oParent);
        [id(0x60040002), helpcontext(0x00002907)]
        HRESULT GetItem(
                        [in] BSTR* IDName, 
                        [out, retval] CATBaseDispatch** RealObj);
        [id(0x60040003), propget, helpcontext(0x00002908)]
        HRESULT Name([out, retval] BSTR* oName);
        [id(0x60040004), propget, helpcontext(0x00002909)]
        HRESULT Count([out, retval] long* oNbItems);
        [id(0xfffffffc), propget, restricted, helpcontext(0x0000290a)]
        HRESULT _NewEnum([out, retval] IUnknown** oEnumIter);
    };

    [
      odl,
      uuid(7FBD96B9-3FA0-0000-0280-030BA6000000),
      helpcontext(0x0000a410),
      dual,
      oleautomation
    ]
    interface Windows : Collection {
        [id(0x60050000), helpcontext(0x0000a411)]
        HRESULT Item(
                        [in] VARIANT* iIndex, 
                        [out, retval] Window** oWindow);
        [id(0x60050001), helpcontext(0x0000a412)]
        HRESULT Arrange([in] CatArrangeStyle iStyle);
    };

    [
      odl,
      uuid(7FBD9AB0-6840-0000-0280-030BA6000000),
      helpcontext(0x0000a21c),
      dual,
      oleautomation
    ]
    interface Window : AnyObject {
        [id(0x60050000), propget, helpcontext(0x0000a21d)]
        HRESULT ActiveViewer([out, retval] Viewer** oViewer);
        [id(0x60050001), propget, helpcontext(0x0000a21e)]
        HRESULT Viewers([out, retval] Viewers** oViewers);
        [id(0x60050002), propget, helpcontext(0x0000a21f)]
        HRESULT WindowState([out, retval] CatWindowState* oWindowState);
        [id(0x60050002), propput, helpcontext(0x0000a21f)]
        HRESULT WindowState([in] CatWindowState oWindowState);
        [id(0x60050004), propget, helpcontext(0x0000a220)]
        HRESULT Caption([out, retval] BSTR* oCaption);
        [id(0x60050004), propput, helpcontext(0x0000a220)]
        HRESULT Caption([in] BSTR* oCaption);
        [id(0x60050006), propget, helpcontext(0x0000a221)]
        HRESULT Width([out, retval] long* oWidth);
        [id(0x60050006), propput, helpcontext(0x0000a221)]
        HRESULT Width([in] long oWidth);
        [id(0x60050008), propget, helpcontext(0x0000a222)]
        HRESULT Height([out, retval] long* oHeight);
        [id(0x60050008), propput, helpcontext(0x0000a222)]
        HRESULT Height([in] long oHeight);
        [id(0x6005000a), propget, helpcontext(0x0000a223)]
        HRESULT Left([out, retval] long* oLeft);
        [id(0x6005000a), propput, helpcontext(0x0000a223)]
        HRESULT Left([in] long oLeft);
        [id(0x6005000c), propget, helpcontext(0x0000a224)]
        HRESULT Top([out, retval] long* oTop);
        [id(0x6005000c), propput, helpcontext(0x0000a224)]
        HRESULT Top([in] long oTop);
        [id(0x6005000e), propget, helpcontext(0x0000a225)]
        HRESULT PageSetup([out, retval] PageSetup** oPageSetup);
        [id(0x6005000e), propput, helpcontext(0x0000a225)]
        HRESULT PageSetup([in] PageSetup* oPageSetup);
        [id(0x60050010), helpcontext(0x0000a226)]
        HRESULT NewWindow([out, retval] Window** oWindow);
        [id(0x60050011), helpcontext(0x0000a227)]
        HRESULT Activate();
        [id(0x60050012), helpcontext(0x0000a228)]
        HRESULT ActivateNext();
        [id(0x60050013), helpcontext(0x0000a229)]
        HRESULT ActivatePrevious();
        [id(0x60050014), helpcontext(0x0000a22a)]
        HRESULT PrintOut();
        [id(0x60050015), helpcontext(0x0000a22b)]
        HRESULT PrintToFile([in] BSTR* fileName);
        [id(0x60050016), helpcontext(0x0000a22c)]
        HRESULT Close();
    };

    [
      odl,
      uuid(80BA5F08-1DAB-0000-0280-030BA6000000),
      helpcontext(0x00009088),
      dual,
      oleautomation
    ]
    interface Viewer : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00009089)]
        HRESULT FullScreen([out, retval] VARIANT_BOOL* oFullScreen);
        [id(0x60050000), propput, helpcontext(0x00009089)]
        HRESULT FullScreen([in] VARIANT_BOOL oFullScreen);
        [id(0x60050002), helpcontext(0x0000908a)]
        HRESULT GetBackgroundColor([in, out] SAFEARRAY(VARIANT) color);
        [id(0x60050003), helpcontext(0x0000908b)]
        HRESULT PutBackgroundColor([in] SAFEARRAY(VARIANT) color);
        [id(0x60050004), propget, helpcontext(0x0000908c)]
        HRESULT Width([out, retval] long* oWidth);
        [id(0x60050005), propget, helpcontext(0x0000908d)]
        HRESULT Height([out, retval] long* oHeight);
        [id(0x60050006), helpcontext(0x0000908e)]
        HRESULT Update();
        [id(0x60050007), helpcontext(0x0000908f)]
        HRESULT Reframe();
        [id(0x60050008), helpcontext(0x00009090)]
        HRESULT ZoomIn();
        [id(0x60050009), helpcontext(0x00009091)]
        HRESULT ZoomOut();
        [id(0x6005000a), helpcontext(0x00009092)]
        HRESULT CaptureToFile(
                        [in] CatCaptureFormat iFormat, 
                        [in] BSTR* iFile);
        [id(0x6005000b), helpcontext(0x00009093)]
        HRESULT NewCamera([out, retval] Camera** oCamera);
        [id(0x6005000c), helpcontext(0x00009094)]
        HRESULT Activate();
    };



    [
      odl,
      uuid(80BA687F-12CE-0000-0280-030BA6000000),
      helpcontext(0x00002134),
      dual,
      oleautomation
    ]
    interface Camera : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00002135)]
        HRESULT Type([out, retval] CatCameraType* oType);
    };



    [
      odl,
      uuid(80BA53E7-7FCB-0000-0280-030BA6000000),
      helpcontext(0x00009664),
      dual,
      oleautomation
    ]
    interface Viewers : Collection {
        [id(0x60050000), helpcontext(0x00009665)]
        HRESULT Item(
                        [in] long iIndex, 
                        [out, retval] Viewer** oViewer);
    };

    [
      odl,
      uuid(7FBD9B52-C961-0000-0280-030BA6000000),
      helpcontext(0x00005fb4),
      dual,
      oleautomation
    ]
    interface PageSetup : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00005fb5)]
        HRESULT PaperSize([out, retval] CatPaperSize* oPaperSize);
        [id(0x60050000), propput, helpcontext(0x00005fb5)]
        HRESULT PaperSize([in] CatPaperSize oPaperSize);
        [id(0x60050002), propget, helpcontext(0x00005fb6)]
        HRESULT PaperWidth([out, retval] float* oPaperWidth);
        [id(0x60050002), propput, helpcontext(0x00005fb6)]
        HRESULT PaperWidth([in] float oPaperWidth);
        [id(0x60050004), propget, helpcontext(0x00005fb7)]
        HRESULT PaperHeight([out, retval] float* oPaperHeight);
        [id(0x60050004), propput, helpcontext(0x00005fb7)]
        HRESULT PaperHeight([in] float oPaperHeight);
        [id(0x60050006), propget, helpcontext(0x00005fb8)]
        HRESULT Orientation([out, retval] CatPaperOrientation* Orientation);
        [id(0x60050006), propput, helpcontext(0x00005fb8)]
        HRESULT Orientation([in] CatPaperOrientation Orientation);
        [id(0x60050008), propget, helpcontext(0x00005fb9)]
        HRESULT BottomMargin([out, retval] float* oBottomMargin);
        [id(0x60050008), propput, helpcontext(0x00005fb9)]
        HRESULT BottomMargin([in] float oBottomMargin);
        [id(0x6005000a), propget, helpcontext(0x00005fba)]
        HRESULT TopMargin([out, retval] float* oTopMargin);
        [id(0x6005000a), propput, helpcontext(0x00005fba)]
        HRESULT TopMargin([in] float oTopMargin);
        [id(0x6005000c), propget, helpcontext(0x00005fbb)]
        HRESULT LeftMargin([out, retval] float* oLeftMargin);
        [id(0x6005000c), propput, helpcontext(0x00005fbb)]
        HRESULT LeftMargin([in] float oLeftMargin);
        [id(0x6005000e), propget, helpcontext(0x00005fbc)]
        HRESULT RightMargin([out, retval] float* oRightMargin);
        [id(0x6005000e), propput, helpcontext(0x00005fbc)]
        HRESULT RightMargin([in] float oRightMargin);
        [id(0x60050010), propget, helpcontext(0x00005fbd)]
        HRESULT MaximumSize([out, retval] VARIANT_BOOL* oMaxSize);
        [id(0x60050010), propput, helpcontext(0x00005fbd)]
        HRESULT MaximumSize([in] VARIANT_BOOL oMaxSize);
        [id(0x60050012), propget, helpcontext(0x00005fbe)]
        HRESULT Left([out, retval] float* oLeft);
        [id(0x60050012), propput, helpcontext(0x00005fbe)]
        HRESULT Left([in] float oLeft);
        [id(0x60050014), propget, helpcontext(0x00005fbf)]
        HRESULT Bottom([out, retval] float* oBottom);
        [id(0x60050014), propput, helpcontext(0x00005fbf)]
        HRESULT Bottom([in] float oBottom);
        [id(0x60050016), propget, helpcontext(0x00005fc0)]
        HRESULT Zoom([out, retval] float* oZoom);
        [id(0x60050016), propput, helpcontext(0x00005fc0)]
        HRESULT Zoom([in] float oZoom);
        [id(0x60050018), propget, helpcontext(0x00005fc1)]
        HRESULT Rotation([out, retval] CatImageRotation* oRotation);
        [id(0x60050018), propput, helpcontext(0x00005fc1)]
        HRESULT Rotation([in] CatImageRotation oRotation);
        [id(0x6005001a), propget, helpcontext(0x00005fc2)]
        HRESULT Banner([out, retval] BSTR* oBanner);
        [id(0x6005001a), propput, helpcontext(0x00005fc2)]
        HRESULT Banner([in] BSTR* oBanner);
        [id(0x6005001c), propget, helpcontext(0x00005fc3)]
        HRESULT BannerPosition([out, retval] CatBannerPosition* oBannerPosition);
        [id(0x6005001c), propput, helpcontext(0x00005fc3)]
        HRESULT BannerPosition([in] CatBannerPosition oBannerPosition);
        [id(0x6005001e), propget, helpcontext(0x00005fc4)]
        HRESULT Logo([out, retval] BSTR* oLogo);
        [id(0x6005001e), propput, helpcontext(0x00005fc4)]
        HRESULT Logo([in] BSTR* oLogo);
        [id(0x60050020), propget, helpcontext(0x00005fc5)]
        HRESULT Quality([out, retval] CatPrintQuality* oQuality);
        [id(0x60050020), propput, helpcontext(0x00005fc5)]
        HRESULT Quality([in] CatPrintQuality oQuality);
        [id(0x60050022), propget, helpcontext(0x00005fc6)]
        HRESULT Scaling1To1([out, retval] VARIANT_BOOL* oScaling1To1);
        [id(0x60050022), propput, helpcontext(0x00005fc6)]
        HRESULT Scaling1To1([in] VARIANT_BOOL oScaling1To1);
        [id(0x60050024), propget, helpcontext(0x00005fc7)]
        HRESULT color([out, retval] CatPrintColor* oColor);
        [id(0x60050024), propput, helpcontext(0x00005fc7)]
        HRESULT color([in] CatPrintColor oColor);
        [id(0x60050026), propget, helpcontext(0x00005fc8)]
        HRESULT UseImageSize([out, retval] VARIANT_BOOL* oUseImageSize);
        [id(0x60050026), propput, helpcontext(0x00005fc8)]
        HRESULT UseImageSize([in] VARIANT_BOOL oUseImageSize);
        [id(0x60050028), propget, helpcontext(0x00005fc9)]
        HRESULT Dpi([out, retval] float* oDpi);
        [id(0x60050028), propput, helpcontext(0x00005fc9)]
        HRESULT Dpi([in] float oDpi);
        [id(0x6005002a), propget, helpcontext(0x00005fca)]
        HRESULT PrintRenderingMode([out, retval] CatPrintRenderingMode* oRenderingMode);
        [id(0x6005002a), propput, helpcontext(0x00005fca)]
        HRESULT PrintRenderingMode([in] CatPrintRenderingMode oRenderingMode);
    };

    



    [
      odl,
      uuid(DB6DE164-1739-11D3-B806-0008C73F2494),
      helpcontext(0x00006590),
      dual,
      oleautomation
    ]
    interface Printers : Collection {
        [id(0x60050000), helpcontext(0x00006591)]
        HRESULT Item(
                        [in] VARIANT* iIndex, 
                        [out, retval] Printer** oPrinter);
    };

    [
      odl,
      uuid(A5B37198-1729-11D3-B806-0008C73F2494),
      helpcontext(0x0000639c),
      dual,
      oleautomation
    ]
    interface Printer : AnyObject {
        [id(0x60050000), propget, helpcontext(0x0000639d)]
        HRESULT DeviceName([out, retval] BSTR* oDeviceName);
        [id(0x60050001), propget, helpcontext(0x0000639e)]
        HRESULT PaperSize([out, retval] CatPaperSize* oPaperSize);
        [id(0x60050002), propget, helpcontext(0x0000639f)]
        HRESULT Orientation([out, retval] CatPaperOrientation* Orientation);
        [id(0x60050003), propget, helpcontext(0x000063a0)]
        HRESULT PaperWidth([out, retval] float* oPaperWidth);
        [id(0x60050004), propget, helpcontext(0x000063a1)]
        HRESULT PaperHeight([out, retval] float* oPaperHeight);
    };

    [
      odl,
      uuid(C1D63CB8-C455-11D3-B85C-0008C7191EA2),
      helpcontext(0x00004074),
      dual,
      oleautomation
    ]
    interface FileSystem : AnyObject {
        [id(0x60050000), helpcontext(0x00004075)]
        HRESULT GetFolder(
                        [in] BSTR* iPath, 
                        [out, retval] Folder** oFolder);
        [id(0x60050001), helpcontext(0x00004076)]
        HRESULT CopyFolder(
                        [in] BSTR* iSourcePath, 
                        [in] BSTR* iDestinationPath);
        [id(0x60050002), helpcontext(0x00004077)]
        HRESULT CreateFolder(
                        [in] BSTR* iPath, 
                        [out, retval] Folder** oFolder);
        [id(0x60050003), helpcontext(0x00004078)]
        HRESULT DeleteFolder([in] BSTR* iPath);
        [id(0x60050004), helpcontext(0x00004079)]
        HRESULT FolderExists(
                        [in] BSTR* iPath, 
                        [out, retval] VARIANT_BOOL* oExists);
        [id(0x60050005), helpcontext(0x0000407a)]
        HRESULT GetFile(
                        [in] BSTR* iPath, 
                        [out, retval] File** oFile);
        [id(0x60050006), helpcontext(0x0000407b)]
        HRESULT CopyFile(
                        [in] BSTR* iPathSource, 
                        [in] BSTR* iPathDestination, 
                        [in] VARIANT_BOOL iOverwrite);
        [id(0x60050007), helpcontext(0x0000407c)]
        HRESULT CreateFile(
                        [in] BSTR* iPath, 
                        [in] VARIANT_BOOL iOverwrite, 
                        [out, retval] File** oFile);
        [id(0x60050008), helpcontext(0x0000407d)]
        HRESULT DeleteFile([in] BSTR* iPath);
        [id(0x60050009), helpcontext(0x0000407e)]
        HRESULT FileExists(
                        [in] BSTR* iPath, 
                        [out, retval] VARIANT_BOOL* oExists);
        [id(0x6005000a), propget, helpcontext(0x0000407f)]
        HRESULT TemporaryDirectory([out, retval] Folder** oTmpDirectory);
        [id(0x6005000b), propget, helpcontext(0x00004080)]
        HRESULT PathSeparator([out, retval] BSTR* oPathSeparator);
        [id(0x6005000c), propget, helpcontext(0x00004081)]
        HRESULT FileSeparator([out, retval] BSTR* oFileSeparator);
        [id(0x6005000d), helpcontext(0x00004082)]
        HRESULT ConcatenatePaths(
                        [in] BSTR* iPathChunk1, 
                        [in] BSTR* iPathChunk2, 
                        [out, retval] BSTR* oPath);
    };

    [
      odl,
      uuid(C324BBB0-C44E-11D3-B85C-0008C7191EA2),
      helpcontext(0x0000445c),
      dual,
      oleautomation
    ]
    interface Folder : FileComponent {
        [id(0x60060000), propget, helpcontext(0x0000445d)]
        HRESULT Files([out, retval] Files** oFiles);
        [id(0x60060001), propget, helpcontext(0x0000445e)]
        HRESULT SubFolders([out, retval] Folders** oSubFolders);
    };

    [
      odl,
      uuid(01C7EB5C-A78A-11D5-85D4-00508B675233),
      helpcontext(0x00003e80),
      dual,
      oleautomation
    ]
    interface FileComponent : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00003e81)]
        HRESULT Path([out, retval] BSTR* oPath);
        [id(0x60050001), propget, helpcontext(0x00003e82)]
        HRESULT ParentFolder([out, retval] Folder** oParentFolder);
        [id(0x60050001), propput, helpcontext(0x00003e82)]
        HRESULT ParentFolder([in] Folder* oParentFolder);
    };

    [
      odl,
      uuid(1AEC8328-C454-11D3-B85C-0008C7191EA2),
      helpcontext(0x00004268),
      dual,
      oleautomation
    ]
    interface Files : Collection {
        [id(0x60050000), helpcontext(0x00004269)]
        HRESULT Item(
                        [in] long iNumber, 
                        [out, retval] File** oFile);
    };

    [
      odl,
      uuid(CAFF2870-C44A-11D3-B85C-0008C7191EA2),
      helpcontext(0x00003c8c),
      dual,
      oleautomation
    ]
    interface File : FileComponent {
        [id(0x60060000), propget, helpcontext(0x00003c8d)]
        HRESULT Size([out, retval] long* oSize);
        [id(0x60060001), propget, helpcontext(0x00003c8e)]
        HRESULT Type([out, retval] BSTR* oType);
        [id(0x60060002), helpcontext(0x00003c8f)]
        HRESULT OpenAsTextStream(
                        [in] BSTR* iMode, 
                        [out, retval] TextStream** oTextStream);
    };

    [
      odl,
      uuid(21E56FA8-C455-11D3-B85C-0008C7191EA2),
      helpcontext(0x00008ca0),
      dual,
      oleautomation
    ]
    interface TextStream : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00008ca1)]
        HRESULT AtEndOfLine([out, retval] VARIANT_BOOL* oAtEndOfLine);
        [id(0x60050001), propget, helpcontext(0x00008ca2)]
        HRESULT AtEndOfStream([out, retval] VARIANT_BOOL* oAtEndOfStream);
        [id(0x60050002), helpcontext(0x00008ca3)]
        HRESULT Close();
        [id(0x60050003), helpcontext(0x00008ca4)]
        HRESULT Read(
                        [in] long iNumOfChar, 
                        [out, retval] BSTR* oReadString);
        [id(0x60050004), helpcontext(0x00008ca5)]
        HRESULT ReadLine([out, retval] BSTR* oReadLine);
        [id(0x60050005), helpcontext(0x00008ca6)]
        HRESULT Write([in] BSTR* iWrittenString);
    };

    [
      odl,
      uuid(3E2466D0-C450-11D3-B85C-0008C7191EA2),
      helpcontext(0x00004650),
      dual,
      oleautomation
    ]
    interface Folders : Collection {
        [id(0x60050000), helpcontext(0x00004651)]
        HRESULT Item(
                        [in] long iNumber, 
                        [out, retval] Folder** oFolder);
    };

    [
      odl,
      uuid(010508C6-7218-11D1-A5EE-00A0C9575177),
      helpcontext(0x00008aac),
      dual,
      oleautomation
    ]
    interface SystemService : AnyObject {
        [id(0x60050000), helpcontext(0x00008aad)]
        HRESULT Environ(
                        [in] BSTR* iEnvString, 
                        [out, retval] BSTR* oValue);
        [id(0x60050001), helpcontext(0x00008aae)]
        HRESULT Print([in] BSTR* iString);
        [id(0x60050002), helpcontext(0x00008aaf)]
        HRESULT ExecuteProcessus(
                        [in] BSTR* iExecutablePath, 
                        [out, retval] long* oReturnCode);
        [id(0x60050003), helpcontext(0x00008ab0)]
        HRESULT ExecuteBackgroundProcessus(
                        [in] BSTR* iExecutablePath, 
                        [out, retval] long* oReturnCode);
        [id(0x60050004), helpcontext(0x00008ab1)]
        HRESULT ExecuteScript(
                        [in] BSTR* iLibraryName, 
                        [in] CatScriptLibraryType iType, 
                        [in] BSTR* iProgramName, 
                        [in] BSTR* iFunctionName, 
                        [in] SAFEARRAY(VARIANT) iParameters, 
                        [out, retval] VARIANT* oResult);
        [id(0x60050005), helpcontext(0x00008ab2)]
        HRESULT Evaluate(
                        [in] BSTR* iScriptText, 
                        [in] CATScriptLanguage iLanguage, 
                        [in] BSTR* iFunctionName, 
                        [in] SAFEARRAY(VARIANT) iParameters, 
                        [out, retval] VARIANT* oResult);
    };

    

    [
      odl,
      uuid(FED51760-FB45-11D3-9EE1-00508B675233),
      helpcontext(0x00001388),
      dual,
      oleautomation
    ]
    interface Batch : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00001389)]
        HRESULT BatchDescriptorPath([out, retval] BSTR* oPath);
        [id(0x60050000), propput, helpcontext(0x00001389)]
        HRESULT BatchDescriptorPath([in] BSTR* oPath);
        [id(0x60050002), propget, helpcontext(0x0000138a)]
        HRESULT BatchDescriptorPathFromParam([out, retval] BSTR* oPath);
        [id(0x60050002), propput, helpcontext(0x0000138a)]
        HRESULT BatchDescriptorPathFromParam([in] BSTR* oPath);
        [id(0x60050004), propget, helpcontext(0x0000138b)]
        HRESULT ParametersPath([out, retval] BSTR* oPath);
        [id(0x60050004), propput, helpcontext(0x0000138b)]
        HRESULT ParametersPath([in] BSTR* oPath);
        [id(0x60050006), propget, helpcontext(0x0000138c)]
        HRESULT Local([out, retval] VARIANT_BOOL* oLocal);
        [id(0x60050006), propput, helpcontext(0x0000138c)]
        HRESULT Local([in] VARIANT_BOOL oLocal);
        [id(0x60050008), propget, helpcontext(0x0000138d)]
        HRESULT BatchParameters([out, retval] BatchElement** oBatchParameters);
        [id(0x60050009), propget, helpcontext(0x0000138e)]
        HRESULT InputParameters([out, retval] BatchElement** oInputParameters);
        [id(0x6005000a), propget, helpcontext(0x0000138f)]
        HRESULT OutputParameters([out, retval] BatchElement** oOutputParameters);
        [id(0x6005000b), propget, helpcontext(0x00001390)]
        HRESULT PCs([out, retval] BatchElement** oPCs);
        [id(0x6005000c), propget, helpcontext(0x00001391)]
        HRESULT BatchLog([out, retval] BatchLog** oBatchLog);
        [id(0x6005000d), propget, helpcontext(0x00001392)]
        HRESULT BatchOutput([out, retval] BatchOutput** oBatchOutput);
        [id(0x6005000e), propget, helpcontext(0x00001393)]
        HRESULT Id([out, retval] long* oId);
        [id(0x6005000f), propget, helpcontext(0x00001394)]
        HRESULT UUID([out, retval] BSTR* oUUID);
        [id(0x6005000f), propput, helpcontext(0x00001394)]
        HRESULT UUID([in] BSTR* oUUID);
        [id(0x60050011), propget, helpcontext(0x00001395)]
        HRESULT Description([out, retval] BSTR* oDescription);
        [id(0x60050012), propget, helpcontext(0x00001396)]
        HRESULT Language([out, retval] BSTR* oLanguage);
        [id(0x60050013), propget, helpcontext(0x00001397)]
        HRESULT Script([out, retval] BSTR* oScript);
        [id(0x60050014), propget, helpcontext(0x00001398)]
        HRESULT InputFormat([out, retval] BSTR* oInputParameters);
        [id(0x60050015), propget, helpcontext(0x00001399)]
        HRESULT Category([out, retval] BSTR* oCategory);
        [id(0x60050016), propget, helpcontext(0x0000139a)]
        HRESULT CommandLine([out, retval] BSTR* oCommandLine);
        [id(0x60050017), propget, helpcontext(0x0000139b)]
        HRESULT SettingMode([out, retval] long* oSettingMode);
    };

    [
      odl,
      uuid(1CEA9860-FB46-11D3-9EE1-00508B675233),
      helpcontext(0x0000157c),
      dual,
      oleautomation
    ]
    interface BatchElement : AnyObject {
        [id(0x60050000), propget, helpcontext(0x0000157d)]
        HRESULT Children([out, retval] BatchElements** oChildren);
        [id(0x60050001), propget, helpcontext(0x0000157e)]
        HRESULT TagName([out, retval] BSTR* oTagName);
        [id(0x60050002), propget, helpcontext(0x0000157f)]
        HRESULT ParentElement([out, retval] BatchElement** oParent);
        [id(0x60050003), propget, helpcontext(0x00001580)]
        HRESULT FileList([out, retval] BatchElements** oFileList);
        [id(0x60050004), propget, helpcontext(0x00001581)]
        HRESULT FolderList([out, retval] BatchElements** oFolderList);
        [id(0x60050005), propget, helpcontext(0x00001582)]
        HRESULT PCList([out, retval] BatchElements** oPCList);
        [id(0x60050006), propget, helpcontext(0x00001583)]
        HRESULT Path([out, retval] BSTR* oPath);
        [id(0x60050007), helpcontext(0x00001584)]
        HRESULT BoolValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] VARIANT_BOOL* oBool);
        [id(0x60050008), helpcontext(0x00001585)]
        HRESULT LongValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] long* oLong);
        [id(0x60050009), helpcontext(0x00001586)]
        HRESULT FloatValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] float* oFloat);
        [id(0x6005000a), helpcontext(0x00001587)]
        HRESULT DoubleValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] double* oDouble);
        [id(0x6005000b), helpcontext(0x00001588)]
        HRESULT StringValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] BSTR* oString);
        [id(0x6005000c), helpcontext(0x00001589)]
        HRESULT FilesValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] Files** oFiles);
        [id(0x6005000d), helpcontext(0x0000158a)]
        HRESULT DocumentValue(
                        [in] BSTR* iAttrName, 
                        [out, retval] Document** oDocument);
        [id(0x6005000e), helpcontext(0x0000158b)]
        HRESULT DataValue([in, out] BSTR* oTag);
        [id(0x6005000f), helpcontext(0x0000158c)]
        HRESULT Parameter(
                        [in] BSTR* iId, 
                        [out, retval] BatchElement** oParameter);
        [id(0x60050010), helpcontext(0x0000158d)]
        HRESULT BoolArg([out, retval] VARIANT_BOOL* oBool);
        [id(0x60050011), helpcontext(0x0000158e)]
        HRESULT LongArg([out, retval] long* oLong);
        [id(0x60050012), helpcontext(0x0000158f)]
        HRESULT FloatArg([out, retval] float* oFloat);
        [id(0x60050013), helpcontext(0x00001590)]
        HRESULT DoubleArg([out, retval] double* oDouble);
        [id(0x60050014), helpcontext(0x00001591)]
        HRESULT StringArg([out, retval] BSTR* oString);
    };

    [
      odl,
      uuid(CE7BACA0-FB45-11D3-9EE1-00508B675233),
      helpcontext(0x00001770),
      dual,
      oleautomation
    ]
    interface BatchElements : Collection {
        [id(0x60050000), propget, helpcontext(0x00001771)]
        HRESULT ParentElement([out, retval] BatchElement** oParent);
        [id(0x60050001), helpcontext(0x00001772)]
        HRESULT Item(
                        [in] long iNumber, 
                        [out, retval] BatchElement** oBatchElement);
    };

    [
      odl,
      uuid(1C16BAAC-D500-11D4-85BB-00508B675233),
      helpcontext(0x00001964),
      dual,
      oleautomation
    ]
    interface BatchLog : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00001965)]
        HRESULT Path([out, retval] BSTR* oPath);
        [id(0x60050000), propput, helpcontext(0x00001965)]
        HRESULT Path([in] BSTR* oPath);
        [id(0x60050002), propget, helpcontext(0x00001966)]
        HRESULT OverWrite([out, retval] VARIANT_BOOL* OverWrite);
        [id(0x60050002), propput, helpcontext(0x00001966)]
        HRESULT OverWrite([in] VARIANT_BOOL OverWrite);
        [id(0x60050004), helpcontext(0x00001967)]
        HRESULT Write([in] BSTR* iWrittenString);
    };

    [
      odl,
      uuid(DFAE992C-D4FF-11D4-85BB-00508B675233),
      helpcontext(0x00001b58),
      dual,
      oleautomation
    ]
    interface BatchOutput : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00001b59)]
        HRESULT Path([out, retval] BSTR* oPath);
        [id(0x60050000), propput, helpcontext(0x00001b59)]
        HRESULT Path([in] BSTR* oPath);
        [id(0x60050002), propget, helpcontext(0x00001b5a)]
        HRESULT OverWrite([out, retval] VARIANT_BOOL* OverWrite);
        [id(0x60050002), propput, helpcontext(0x00001b5a)]
        HRESULT OverWrite([in] VARIANT_BOOL OverWrite);
        [id(0x60050004), helpcontext(0x00001b5b)]
        HRESULT Write([in] BSTR* iWrittenString);
    };

    [
      odl,
      uuid(FEBDAAAE-2946-11D3-B051-006094EB7CE3),
      helpcontext(0x000055f0),
      hidden,
      dual,
      oleautomation
    ]
    interface Mail : AnyObject {
        [id(0x60050000), helpcontext(0x000055f1)]
        HRESULT GetRecipients(
                        [in] CatRecipientType iRecipientType, 
                        [out, retval] Recipients** oRecipients);
        [id(0x60050001), helpcontext(0x000055f2)]
        HRESULT GetOriginator([out, retval] BSTR* oOriginator);
        [id(0x60050002), helpcontext(0x000055f3)]
        HRESULT SetOriginator([in] BSTR* iOriginator);
        [id(0x60050003), helpcontext(0x000055f4)]
        HRESULT GetSubject([out, retval] BSTR* oSubject);
        [id(0x60050004), helpcontext(0x000055f5)]
        HRESULT SetSubject([in] BSTR* iSubject);
        [id(0x60050005), helpcontext(0x000055f6)]
        HRESULT GetContent([out, retval] BSTR* oContent);
        [id(0x60050006), helpcontext(0x000055f7)]
        HRESULT SetContent([in] BSTR* iContent);
        [id(0x60050007), helpcontext(0x000055f8)]
        HRESULT GetAttachments([out, retval] Attachments** oAttachments);
        [id(0x60050008), helpcontext(0x000055f9)]
        HRESULT Send([in] CatMailUIPolicy iUIPolicy);
    };

    

    [
      odl,
      uuid(0267A658-2949-11D3-B051-006094EB7CE3),
      helpcontext(0x00006978),
      hidden,
      dual,
      oleautomation
    ]
    interface Recipients : AnyObject {
        [id(0x60050000), helpcontext(0x00006979)]
        HRESULT Add([in] BSTR* iRecipient);
        [id(0x60050001), helpcontext(0x0000697a)]
        HRESULT RemoveAll();
    };

    [
      odl,
      uuid(50305E98-2949-11D3-B051-006094EB7CE3),
      helpcontext(0x00000fa0),
      hidden,
      dual,
      oleautomation
    ]
    interface Attachments : AnyObject {
        [id(0x60050000), helpcontext(0x00000fa1)]
        HRESULT Add(
                        [in] BSTR* iFilePath, 
                        [in] BSTR* iTmpFilePath);
        [id(0x60050001), helpcontext(0x00000fa2)]
        HRESULT RemoveAll();
    };

    

    [
      odl,
      uuid(963C65AB-5A4A-0000-0280-030EC7000000),
      helpcontext(0x00007724),
      dual,
      oleautomation
    ]
    interface SendToService : AnyObject {
        [id(0x60050000), helpcontext(0x00007725)]
        HRESULT SetInitialFile([in] BSTR* iPath);
        [id(0x60050001), helpcontext(0x00007726)]
        HRESULT GetListOfDependantFile([in, out] SAFEARRAY(VARIANT) oDependant);
        [id(0x60050002), helpcontext(0x00007727)]
        HRESULT GetListOfToBeCopiedFiles([in, out] SAFEARRAY(VARIANT) oWillBeCopied);
        [id(0x60050003), helpcontext(0x00007728)]
        HRESULT AddFile([in] BSTR* iPath);
        [id(0x60050004), helpcontext(0x00007729)]
        HRESULT RemoveFile([in] BSTR* iFile);
        [id(0x60050005), helpcontext(0x0000772a)]
        HRESULT KeepDirectory([in] VARIANT_BOOL iKeep);
        [id(0x60050006), helpcontext(0x0000772b)]
        HRESULT SetDirectoryFile([in] BSTR* iDirectory);
        [id(0x60050007), helpcontext(0x0000772c)]
        HRESULT SetDirectoryOneFile(
                        [in] BSTR* iFile, 
                        [in] BSTR* iDirectory);
        [id(0x60050008), helpcontext(0x0000772d)]
        HRESULT SetRenameFile(
                        [in] BSTR* iOldname, 
                        [in] BSTR* iNewName);
        [id(0x60050009), helpcontext(0x0000772e)]
        HRESULT Run();
        [id(0x6005000a), helpcontext(0x0000772f)]
        HRESULT GetLastSendToMethodError(
                        [in, out] BSTR* oErrorParam, 
                        [in, out] long* oErrorCode);
    };

    [
      odl,
      uuid(00855D50-ABC1-11D6-BE9F-000347D06CA1),
      helpcontext(0x000082dc),
      dual,
      oleautomation
    ]
    interface Settings : Collection {
        [id(0x60050000), helpcontext(0x000082dd)]
        HRESULT Item(
                        [in] BSTR* iIndex, 
                        [out, retval] Setting** oSetting);
    };

    [
      odl,
      uuid(082B1347-9B29-458F-A757-D5A2466252F0),
      helpcontext(0x00007d00),
      dual,
      oleautomation
    ]
    interface Setting : AnyObject {
        [id(0x60050000), propput, helpcontext(0x00007d01)]
        HRESULT Value([in] VARIANT* oValue);
        [id(0x60050000), propget, helpcontext(0x00007d01)]
        HRESULT Value([out, retval] VARIANT* oValue);
        [id(0x60050002), propget, helpcontext(0x00007d02)]
        HRESULT LockState([out, retval] VARIANT_BOOL* oLocked);
        [id(0x60050002), propput, helpcontext(0x00007d02)]
        HRESULT LockState([in] VARIANT_BOOL oLocked);
        [id(0x60050004), propget, helpcontext(0x00007d03)]
        HRESULT AdminLevel([out, retval] BSTR* oPath);
        [id(0x60050005), propget, helpcontext(0x00007d04)]
        HRESULT IsModified([out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(A66E17F5-132A-0000-0280-03110E000000),
      helpcontext(0x000080e8),
      dual,
      oleautomation
    ]
    interface SettingControllers : Collection {
        [id(0x60050000), helpcontext(0x000080e9)]
        HRESULT Item(
                        [in] BSTR* iIndex, 
                        [out, retval] SettingController** oSetting);
    };

    [
      odl,
      uuid(12CE8949-0CA6-4564-8C5F-DAB2710E4D69),
      helpcontext(0x00007ef4),
      dual,
      oleautomation
    ]
    interface SettingController : AnyObject {
        [id(0x60050000), helpcontext(0x00007ef5)]
        HRESULT Commit();
        [id(0x60050001), helpcontext(0x00007ef6)]
        HRESULT Rollback();
        [id(0x60050002), helpcontext(0x00007ef7)]
        HRESULT ResetToAdminValues();
        [id(0x60050003), helpcontext(0x00007ef8)]
        HRESULT ResetToAdminValuesByName([in] SAFEARRAY(VARIANT) iAttList);
        [id(0x60050004), helpcontext(0x00007ef9)]
        HRESULT SaveRepository();
    };

    [
      odl,
      uuid(BA6ADDF0-6E41-11D6-8051-0010B5FA1031),
      helpcontext(0x000088b8),
      dual,
      oleautomation
    ]
    interface SystemConfiguration : AnyObject {
        [id(0x60050000), propget, helpcontext(0x000088b9)]
        HRESULT OperatingSystem([out, retval] BSTR* oOperatingSystem);
        [id(0x60050001), propget, helpcontext(0x000088ba)]
        HRESULT Version([out, retval] long* oVersion);
        [id(0x60050002), propget, helpcontext(0x000088bb)]
        HRESULT Release([out, retval] long* oRelease);
        [id(0x60050003), propget, helpcontext(0x000088bc)]
        HRESULT ServicePack([out, retval] long* oServicePack);
        [id(0x60050004), propget, helpcontext(0x000088bd)]
        HRESULT ProductCount([out, retval] long* oProductCount);
        [id(0x60050005), helpcontext(0x000088be)]
        HRESULT GetProductNames([in, out] SAFEARRAY(VARIANT) ioProductNames);
        [id(0x60050006), helpcontext(0x000088bf)]
        HRESULT IsProductAuthorized(
                        [in] BSTR* iProductName, 
                        [out, retval] VARIANT_BOOL* oAuthorized);
    };

    [
      odl,
      uuid(80BA682E-7C1B-0000-0280-030BA6000000),
      helpcontext(0x00002710),
      dual,
      oleautomation
    ]
    interface Cameras : Collection {
        [id(0x60050000), helpcontext(0x00002711)]
        HRESULT Item(
                        [in] VARIANT* iIndex, 
                        [out, retval] Camera** oCamera);
        [id(0x60050001), helpcontext(0x00002712)]
        HRESULT Remove([in] VARIANT* iIndex);
    };

    [
      odl,
      uuid(816AAD14-C5E5-0000-0280-030D3B000000),
      helpcontext(0x0000733c),
      dual,
      oleautomation
    ]
    interface Selection : AnyObject {
        [id(0x60050000), helpcontext(0x0000733d)]
        HRESULT Add([in] AnyObject* iObject);
        [id(0x60050001), helpcontext(0x0000733e)]
        HRESULT Clear();
        [id(0x60050002), helpcontext(0x0000733f)]
        HRESULT Cut();
        [id(0x60050003), helpcontext(0x00007340)]
        HRESULT Copy();
        [id(0x60050004), helpcontext(0x00007341)]
        HRESULT Paste();
        [id(0x60050005), helpcontext(0x00007342)]
        HRESULT PasteSpecial([in] BSTR* iFormat);
        [id(0x60050006), helpcontext(0x00007343)]
        HRESULT PasteLink();
        [id(0x60050007), helpcontext(0x00007344)]
        HRESULT Delete();
        [id(0x60050008), helpcontext(0x00007345)]
        HRESULT Remove([in] long iIndex);
        [id(0x60050009), helpcontext(0x00007346)]
        HRESULT Remove2([in] long iIndex);
        [id(0x6005000a), helpcontext(0x00007347)]
        HRESULT FindObject(
                        [in] BSTR* iObjectType, 
                        [out, retval] AnyObject** oObject);
        [id(0x6005000b), helpcontext(0x00007348)]
        HRESULT Search([in] BSTR* iStringBSTR);
        [id(0x6005000c), propget, helpcontext(0x00007349)]
        HRESULT Selection([out, retval] Selection** oSelection);
        [id(0x6005000d), propget, helpcontext(0x0000734a)]
        HRESULT VisProperties([out, retval] VisPropertySet** oVisProperties);
        [id(0x6005000e), propget, helpcontext(0x0000734b)]
        HRESULT Count([out, retval] long* oCount);
        [id(0x6005000f), propget, helpcontext(0x0000734c)]
        HRESULT Count2([out, retval] long* oCount);
        [id(0x60050010), helpcontext(0x0000734d)]
        HRESULT Item(
                        [in] long iIndex, 
                        [out, retval] SelectedElement** oElement);
        [id(0x60050011), helpcontext(0x0000734e)]
        HRESULT Item2(
                        [in] long iIndex, 
                        [out, retval] SelectedElement** oElement);
        [id(0x60050012), helpcontext(0x0000734f)]
        HRESULT FilterCorrespondence(
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [out, retval] VARIANT_BOOL* oAllFit);
        [id(0x60050013), helpcontext(0x00007350)]
        HRESULT SelectElement2(
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [in] BSTR* iMessage, 
                        [in] VARIANT_BOOL iObjectSelectionBeforeCommandUsePossibility, 
                        [out, retval] BSTR* oOutputState);
        [id(0x60050014), helpcontext(0x00007351)]
        HRESULT SelectElement3(
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [in] BSTR* iMessage, 
                        [in] VARIANT_BOOL iObjectSelectionBeforeCommandUsePossibility, 
                        [in] CATMultiSelectionMode iMultiSelectionMode, 
                        [in] VARIANT_BOOL iTooltip, 
                        [out, retval] BSTR* oOutputState);
        [id(0x60050015), helpcontext(0x00007352)]
        HRESULT SelectElement4(
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [in] BSTR* iActiveDocumentMessage, 
                        [in] BSTR* iNonActiveDocumentMessage, 
                        [in] VARIANT_BOOL iTooltip, 
                        [out] Document** oDocument, 
                        [out, retval] BSTR* oOutputState);
        [id(0x60050016), helpcontext(0x00007353)]
        HRESULT IndicateOrSelectElement2D(
                        [in] BSTR* iMessage, 
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [in] VARIANT_BOOL iObjectSelectionBeforeCommandUsePossibility, 
                        [in] VARIANT_BOOL iTooltip, 
                        [in] VARIANT_BOOL iTriggeringOnMouseMove, 
                        [out] VARIANT_BOOL* oObjectSelected, 
                        [in, out] SAFEARRAY(VARIANT) oDocumentWindowLocation, 
                        [out, retval] BSTR* oOutputState);
        [id(0x60050017), helpcontext(0x00007354)]
        HRESULT IndicateOrSelectElement3D(
                        [in] AnyObject* iPlanarGeometricObject, 
                        [in] BSTR* iMessage, 
                        [in] SAFEARRAY(VARIANT) iFilterType, 
                        [in] VARIANT_BOOL iObjectSelectionBeforeCommandUsePossibility, 
                        [in] VARIANT_BOOL iTooltip, 
                        [in] VARIANT_BOOL iTriggeringOnMouseMove, 
                        [out] VARIANT_BOOL* oObjectSelected, 
                        [in, out] SAFEARRAY(VARIANT) oWindowLocation2D, 
                        [in, out] SAFEARRAY(VARIANT) oWindowLocation3D, 
                        [out, retval] BSTR* oOutputState);
    };

    [
      odl,
      uuid(69274990-9DBE-11D4-A74B-0004AC37AE57),
      helpcontext(0x00009c40),
      dual,
      oleautomation
    ]
    interface VisPropertySet : AnyObject {
        [id(0x60050000), helpcontext(0x00009c41)]
        HRESULT SetRealColor(
                        [in] long iRed, 
                        [in] long iGreen, 
                        [in] long iBlue, 
                        [in] long iInheritance);
        [id(0x60050001), helpcontext(0x00009c42)]
        HRESULT SetRealOpacity(
                        [in] long iOpacity, 
                        [in] long iInheritance);
        [id(0x60050002), helpcontext(0x00009c43)]
        HRESULT SetRealWidth(
                        [in] long iLineWidth, 
                        [in] long iInheritance);
        [id(0x60050003), helpcontext(0x00009c44)]
        HRESULT SetRealLineType(
                        [in] long iLineType, 
                        [in] long iInheritance);
        [id(0x60050004), helpcontext(0x00009c45)]
        HRESULT SetSymbolType([in] long iSymbolType);
        [id(0x60050005), helpcontext(0x00009c46)]
        HRESULT GetRealColor(
                        [out] long* oRed, 
                        [out] long* oGreen, 
                        [out] long* oBlue, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050006), helpcontext(0x00009c47)]
        HRESULT GetRealOpacity(
                        [out] long* oOpacity, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050007), helpcontext(0x00009c48)]
        HRESULT GetRealWidth(
                        [out] long* oLineWidth, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050008), helpcontext(0x00009c49)]
        HRESULT GetRealLineType(
                        [out] long* oLineType, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050009), helpcontext(0x00009c4a)]
        HRESULT GetSymbolType(
                        [out] long* oSymbolType, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x6005000a), helpcontext(0x00009c4b)]
        HRESULT GetRealInheritance(
                        [in] CatVisPropertyType iPropertyType, 
                        [out] long* oInheritance, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x6005000b), helpcontext(0x00009c4c)]
        HRESULT SetVisibleColor(
                        [in] long iRed, 
                        [in] long iGreen, 
                        [in] long iBlue, 
                        [in] long iInheritance);
        [id(0x6005000c), helpcontext(0x00009c4d)]
        HRESULT SetVisibleOpacity(
                        [in] long iOpacity, 
                        [in] long iInheritance);
        [id(0x6005000d), helpcontext(0x00009c4e)]
        HRESULT SetVisibleWidth(
                        [in] long iWidth, 
                        [in] long iInheritance);
        [id(0x6005000e), helpcontext(0x00009c4f)]
        HRESULT SetVisibleLineType(
                        [in] long iLineType, 
                        [in] long iInheritance);
        [id(0x6005000f), helpcontext(0x00009c50)]
        HRESULT GetVisibleColor(
                        [out] long* oRed, 
                        [out] long* oGreen, 
                        [out] long* oBlue, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050010), helpcontext(0x00009c51)]
        HRESULT GetVisibleOpacity(
                        [out] long* oOpacity, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050011), helpcontext(0x00009c52)]
        HRESULT GetVisibleWidth(
                        [out] long* oLineWidth, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050012), helpcontext(0x00009c53)]
        HRESULT GetVisibleLineType(
                        [out] long* oLineType, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050013), helpcontext(0x00009c54)]
        HRESULT GetVisibleInheritance(
                        [in] CatVisPropertyType iPropertyType, 
                        [out] long* oInheritance, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050014), helpcontext(0x00009c55)]
        HRESULT SetShow([in] CatVisPropertyShow iShow);
        [id(0x60050015), helpcontext(0x00009c56)]
        HRESULT GetShow(
                        [out] CatVisPropertyShow* oShow, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050016), helpcontext(0x00009c57)]
        HRESULT SetPick([in] CatVisPropertyPick iPick);
        [id(0x60050017), helpcontext(0x00009c58)]
        HRESULT GetPick(
                        [out] CatVisPropertyPick* oPick, 
                        [out, retval] CatVisPropertyStatus* oStatus);
        [id(0x60050018), helpcontext(0x00009c59)]
        HRESULT SetLayer(
                        [in] CatVisLayerType iLayerType, 
                        [in] long iLayerValue);
        [id(0x60050019), helpcontext(0x00009c5a)]
        HRESULT GetLayer(
                        [out] CatVisLayerType* oLayerType, 
                        [out] long* oLayerValue, 
                        [out, retval] CatVisPropertyStatus* oStatus);
    };

    

    [
      odl,
      uuid(6EF9EAD4-7378-11D4-85B4-00508B675233),
      helpcontext(0x00007148),
      dual,
      oleautomation
    ]
    interface SelectedElement : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00007149)]
        HRESULT Type([out, retval] BSTR* oType);
        [id(0x60050001), propget, helpcontext(0x0000714a)]
        HRESULT Document([out, retval] Document** oDocument);
        [id(0x60050002), helpcontext(0x0000714b)]
        HRESULT GetCoordinates([in, out] SAFEARRAY(VARIANT) ioPoint);
        [id(0x60050003), propget, helpcontext(0x0000714c)]
        HRESULT Value([out, retval] CATBaseDispatch** oObject);
        [id(0x60050004), propget, helpcontext(0x0000714d)]
        HRESULT Reference([out, retval] Reference** oReference);
        [id(0x60050005), propget, helpcontext(0x0000714e)]
        HRESULT LeafProduct([out, retval] AnyObject** oProduct);
    };

    [
      odl,
      uuid(81799037-B0F2-0000-0280-030D3B000000),
      helpcontext(0x00006b6c),
      dual,
      oleautomation
    ]
    interface Reference : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00006b6d)]
        HRESULT DisplayName([out, retval] BSTR* oName);
        [id(0x60050001), helpcontext(0x00006b6e)]
        HRESULT ComposeWith(
                        [in] Reference* iReference, 
                        [out, retval] Reference** oComposedReference);
    };

   

    [
      odl,
      uuid(8735E747-0D55-0000-0280-030B09000000),
      helpcontext(0x0000a604),
      dual,
      oleautomation
    ]
    interface Workbench : AnyObject {
    };

    [
      odl,
      uuid(2636C5B8-4F03-11D1-A26F-0000F87546FD),
      helpcontext(0x00006d60),
      dual,
      oleautomation
    ]
    interface References : Collection {
        [id(0x60050000), helpcontext(0x00006d61)]
        HRESULT Item(
                        [in] VARIANT* iIndex, 
                        [out, retval] Reference** oFace);
    };

    [
      odl,
      uuid(80BA6760-FB5E-0000-0280-030BA6000000),
      helpcontext(0x00005208),
      dual,
      oleautomation
    ]
    interface LightSources : Collection {
        [id(0x60050000), helpcontext(0x00005209)]
        HRESULT Item(
                        [in] long iIndex, 
                        [out, retval] LightSource** oLightSource);
        [id(0x60050001), helpcontext(0x0000520a)]
        HRESULT Add([out, retval] LightSource** oLightSource);
        [id(0x60050002), helpcontext(0x0000520b)]
        HRESULT Remove([in] long iIndex);
    };

    [
      odl,
      uuid(80BA67B5-BBAB-0000-0280-030BA6000000),
      helpcontext(0x00005014),
      dual,
      oleautomation
    ]
    interface LightSource : AnyObject {
        [id(0x60050000), helpcontext(0x00005015)]
        HRESULT GetDirection([in, out] SAFEARRAY(VARIANT) oDirection);
        [id(0x60050001), helpcontext(0x00005016)]
        HRESULT PutDirection([in] SAFEARRAY(VARIANT) oDirection);
    };

    [
      odl,
      uuid(80ECA576-04F4-0000-0280-030BA6000000),
      helpcontext(0x000084d0),
      dual,
      oleautomation
    ]
    interface SpecsAndGeomWindow : Window {
        [id(0x60060000), propget, helpcontext(0x000084d1)]
        HRESULT SpecsViewer([out, retval] SpecsViewer** oViewer);
        [id(0x60060001), propget, helpcontext(0x000084d2)]
        HRESULT Layout([out, retval] CatSpecsAndGeomWindowLayout* oLayout);
        [id(0x60060001), propput, helpcontext(0x000084d2)]
        HRESULT Layout([in] CatSpecsAndGeomWindowLayout oLayout);
    };

    [
      odl,
      uuid(80ECA4E1-790B-0000-0280-030BA6000000),
      helpcontext(0x000086c4),
      dual,
      oleautomation
    ]
    interface SpecsViewer : Viewer2D {
        [id(0x60070000), propget, helpcontext(0x000086c5)]
        HRESULT Layout([out, retval] CatSpecsLayout* oLayout);
        [id(0x60070000), propput, helpcontext(0x000086c5)]
        HRESULT Layout([in] CatSpecsLayout oLayout);
    };

    [
      odl,
      uuid(80BA7F3C-060B-0000-0280-030BA6000000),
      helpcontext(0x0000927c),
      dual,
      oleautomation
    ]
    interface Viewer2D : Viewer {
        [id(0x60060000), propget, helpcontext(0x0000927d)]
        HRESULT Viewpoint2D([out, retval] Viewpoint2D** oViewpoint);
        [id(0x60060000), propput, helpcontext(0x0000927d)]
        HRESULT Viewpoint2D([in] Viewpoint2D* oViewpoint);
    };

    [
      odl,
      uuid(80BA69B0-6CA4-0000-0280-030BA6000000),
      helpcontext(0x00009858),
      dual,
      oleautomation
    ]
    interface Viewpoint2D : AnyObject {
        [id(0x60050000), helpcontext(0x00009859)]
        HRESULT GetOrigin([in, out] SAFEARRAY(VARIANT) oOrigin);
        [id(0x60050001), helpcontext(0x0000985a)]
        HRESULT PutOrigin([in] SAFEARRAY(VARIANT) oOrigin);
        [id(0x60050002), propget, helpcontext(0x0000985b)]
        HRESULT Zoom([out, retval] double* oZoom);
        [id(0x60050002), propput, helpcontext(0x0000985b)]
        HRESULT Zoom([in] double oZoom);
    };

    

    [
      odl,
      uuid(809B55CA-39CC-0000-0280-030BA6000000),
      helpcontext(0x00009a4c),
      dual,
      oleautomation
    ]
    interface Viewpoint3D : AnyObject {
        [id(0x60050000), helpcontext(0x00009a4d)]
        HRESULT GetOrigin([in, out] SAFEARRAY(VARIANT) origin);
        [id(0x60050001), helpcontext(0x00009a4e)]
        HRESULT PutOrigin([in] SAFEARRAY(VARIANT) origin);
        [id(0x60050002), propget, helpcontext(0x00009a4f)]
        HRESULT FocusDistance([out, retval] double* FocusDistance);
        [id(0x60050002), propput, helpcontext(0x00009a4f)]
        HRESULT FocusDistance([in] double FocusDistance);
        [id(0x60050004), helpcontext(0x00009a50)]
        HRESULT GetSightDirection([in, out] SAFEARRAY(VARIANT) oSight);
        [id(0x60050005), helpcontext(0x00009a51)]
        HRESULT PutSightDirection([in] SAFEARRAY(VARIANT) oSight);
        [id(0x60050006), helpcontext(0x00009a52)]
        HRESULT GetUpDirection([in, out] SAFEARRAY(VARIANT) oUp);
        [id(0x60050007), helpcontext(0x00009a53)]
        HRESULT PutUpDirection([in] SAFEARRAY(VARIANT) oUp);
        [id(0x60050008), propget, helpcontext(0x00009a54)]
        HRESULT ProjectionMode([out, retval] CatProjectionMode* oProjectionMode);
        [id(0x60050008), propput, helpcontext(0x00009a54)]
        HRESULT ProjectionMode([in] CatProjectionMode oProjectionMode);
        [id(0x6005000a), propget, helpcontext(0x00009a55)]
        HRESULT Zoom([out, retval] double* oZoom);
        [id(0x6005000a), propput, helpcontext(0x00009a55)]
        HRESULT Zoom([in] double oZoom);
        [id(0x6005000c), propget, helpcontext(0x00009a56)]
        HRESULT FieldOfView([out, retval] double* oFieldOfView);
        [id(0x6005000c), propput, helpcontext(0x00009a56)]
        HRESULT FieldOfView([in] double oFieldOfView);
    };

    

    [
      odl,
      uuid(7F8C8382-D814-0000-0280-030BA6000000),
      helpcontext(0x00009470),
      dual,
      oleautomation
    ]
    interface Viewer3D : Viewer {
        [id(0x60060000), propget, helpcontext(0x00009471)]
        HRESULT Viewpoint3D([out, retval] Viewpoint3D** oViewpoint);
        [id(0x60060000), propput, helpcontext(0x00009471)]
        HRESULT Viewpoint3D([in] Viewpoint3D* oViewpoint);
        [id(0x60060002), helpcontext(0x00009472)]
        HRESULT Translate([in] SAFEARRAY(VARIANT) iVector);
        [id(0x60060003), helpcontext(0x00009473)]
        HRESULT Rotate(
                        [in] SAFEARRAY(VARIANT) iAxis, 
                        [in] double iAngle);
        [id(0x60060004), propget, helpcontext(0x00009474)]
        HRESULT LightSources([out, retval] LightSources** oLightSources);
        [id(0x60060005), propget, helpcontext(0x00009475)]
        HRESULT LightingIntensity([out, retval] double* oIntensity);
        [id(0x60060005), propput, helpcontext(0x00009475)]
        HRESULT LightingIntensity([in] double oIntensity);
        [id(0x60060007), propget, helpcontext(0x00009476)]
        HRESULT LightingMode([out, retval] CatLightingMode* oLightingMode);
        [id(0x60060007), propput, helpcontext(0x00009476)]
        HRESULT LightingMode([in] CatLightingMode oLightingMode);
        [id(0x60060009), propget, helpcontext(0x00009477)]
        HRESULT NavigationStyle([out, retval] CatNavigationStyle* oNavigationStyle);
        [id(0x60060009), propput, helpcontext(0x00009477)]
        HRESULT NavigationStyle([in] CatNavigationStyle oNavigationStyle);
        [id(0x6006000b), propget, helpcontext(0x00009478)]
        HRESULT RenderingMode([out, retval] CatRenderingMode* oRenderingMode);
        [id(0x6006000b), propput, helpcontext(0x00009478)]
        HRESULT RenderingMode([in] CatRenderingMode oRenderingMode);
        [id(0x6006000d), propget, helpcontext(0x00009479)]
        HRESULT NearLimit([out, retval] double* oNearLimit);
        [id(0x6006000d), propput, helpcontext(0x00009479)]
        HRESULT NearLimit([in] double oNearLimit);
        [id(0x6006000f), propget, helpcontext(0x0000947a)]
        HRESULT FarLimit([out, retval] double* oFarLimit);
        [id(0x6006000f), propput, helpcontext(0x0000947a)]
        HRESULT FarLimit([in] double oFarLimit);
        [id(0x60060011), propget, helpcontext(0x0000947b)]
        HRESULT ClippingMode([out, retval] CatClippingMode* oClippingMode);
        [id(0x60060011), propput, helpcontext(0x0000947b)]
        HRESULT ClippingMode([in] CatClippingMode oClippingMode);
        [id(0x60060013), propget, helpcontext(0x0000947c)]
        HRESULT Foggy([out, retval] VARIANT_BOOL* oFoggy);
        [id(0x60060013), propput, helpcontext(0x0000947c)]
        HRESULT Foggy([in] VARIANT_BOOL oFoggy);
        [id(0x60060015), propget, helpcontext(0x0000947d)]
        HRESULT Ground([out, retval] VARIANT_BOOL* oGround);
        [id(0x60060015), propput, helpcontext(0x0000947d)]
        HRESULT Ground([in] VARIANT_BOOL oGround);
    };

    

    [
      odl,
      uuid(687CDF4E-5490-4D2B-8ABB-4224D607C2F6),
      helpcontext(0x0000a028),
      dual,
      oleautomation
    ]
    interface VrmlSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x0000a029)]
        HRESULT ImportUnit([out, retval] long* oImportUnit);
        [id(0x60060000), propput, helpcontext(0x0000a029)]
        HRESULT ImportUnit([in] long oImportUnit);
        [id(0x60060002), helpcontext(0x0000a02a)]
        HRESULT GetImportUnitInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x0000a02b)]
        HRESULT SetImportUnitLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x0000a02c)]
        HRESULT ImportCreaseAngle([out, retval] double* oImportCreaseAngle);
        [id(0x60060004), propput, helpcontext(0x0000a02c)]
        HRESULT ImportCreaseAngle([in] double oImportCreaseAngle);
        [id(0x60060006), helpcontext(0x0000a02d)]
        HRESULT GetImportCreaseAngleInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x0000a02e)]
        HRESULT SetImportCreaseAngleLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x0000a02f)]
        HRESULT ExportVersion([out, retval] long* oExportVersion);
        [id(0x60060008), propput, helpcontext(0x0000a02f)]
        HRESULT ExportVersion([in] long oExportVersion);
        [id(0x6006000a), helpcontext(0x0000a030)]
        HRESULT GetExportVersionInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x0000a031)]
        HRESULT SetExportVersionLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), propget, helpcontext(0x0000a032)]
        HRESULT ExportNormals([out, retval] VARIANT_BOOL* oExportNormals);
        [id(0x6006000c), propput, helpcontext(0x0000a032)]
        HRESULT ExportNormals([in] VARIANT_BOOL oExportNormals);
        [id(0x6006000e), helpcontext(0x0000a033)]
        HRESULT GetExportNormalsInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x0000a034)]
        HRESULT SetExportNormalsLock([in] VARIANT_BOOL iLocked);
        [id(0x60060010), propget, helpcontext(0x0000a035)]
        HRESULT ExportEdges([out, retval] VARIANT_BOOL* oExportEdges);
        [id(0x60060010), propput, helpcontext(0x0000a035)]
        HRESULT ExportEdges([in] VARIANT_BOOL oExportEdges);
        [id(0x60060012), helpcontext(0x0000a036)]
        HRESULT GetExportEdgesInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060013), helpcontext(0x0000a037)]
        HRESULT SetExportEdgesLock([in] VARIANT_BOOL iLocked);
        [id(0x60060014), propget, helpcontext(0x0000a038)]
        HRESULT ExportTexture([out, retval] VARIANT_BOOL* oExportTexture);
        [id(0x60060014), propput, helpcontext(0x0000a038)]
        HRESULT ExportTexture([in] VARIANT_BOOL oExportTexture);
        [id(0x60060016), helpcontext(0x0000a039)]
        HRESULT GetExportTextureInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060017), helpcontext(0x0000a03a)]
        HRESULT SetExportTextureLock([in] VARIANT_BOOL iLocked);
        [id(0x60060018), propget, helpcontext(0x0000a03b)]
        HRESULT ExportTextureFile([out, retval] long* oExportTextureFile);
        [id(0x60060018), propput, helpcontext(0x0000a03b)]
        HRESULT ExportTextureFile([in] long oExportTextureFile);
        [id(0x6006001a), helpcontext(0x0000a03c)]
        HRESULT GetExportTextureFileInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001b), helpcontext(0x0000a03d)]
        HRESULT SetExportTextureFileLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001c), propget, helpcontext(0x0000a03e)]
        HRESULT ExportTextureFormat([out, retval] long* oExportTextureFormat);
        [id(0x6006001c), propput, helpcontext(0x0000a03e)]
        HRESULT ExportTextureFormat([in] long oExportTextureFormat);
        [id(0x6006001e), helpcontext(0x0000a03f)]
        HRESULT GetExportTextureFormatInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001f), helpcontext(0x0000a040)]
        HRESULT SetExportTextureFormatLock([in] VARIANT_BOOL iLocked);
        [id(0x60060020), helpcontext(0x0000a041)]
        HRESULT GetExportBackgroundColor(
                        [out] long* ioR, 
                        [out] long* ioG, 
                        [out] long* ioB);
        [id(0x60060021), helpcontext(0x0000a042)]
        HRESULT SetExportBackgroundColor(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060022), helpcontext(0x0000a043)]
        HRESULT GetExportBackgroundColorInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060023), helpcontext(0x0000a044)]
        HRESULT SetExportBackgroundColorLock([in] VARIANT_BOOL iLocked);
    };

    [
      odl,
      uuid(C5A3063A-9DB3-4C71-BFF9-630DCFE22B33),
      helpcontext(0x00009e34),
      dual,
      oleautomation
    ]
    interface VisualizationSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00009e35)]
        HRESULT ColorBackgroundMode([out, retval] VARIANT_BOOL* oColorBackgroundMode);
        [id(0x60060000), propput, helpcontext(0x00009e35)]
        HRESULT ColorBackgroundMode([in] VARIANT_BOOL oColorBackgroundMode);
        [id(0x60060002), helpcontext(0x00009e36)]
        HRESULT GetColorBackgroundModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00009e37)]
        HRESULT SetColorBackgroundModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), helpcontext(0x00009e38)]
        HRESULT GetBackgroundRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060005), helpcontext(0x00009e39)]
        HRESULT SetBackgroundRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060006), helpcontext(0x00009e3a)]
        HRESULT GetBackgroundRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x00009e3b)]
        HRESULT SetBackgroundRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), helpcontext(0x00009e3c)]
        HRESULT GetNoShowBackgroundRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060009), helpcontext(0x00009e3d)]
        HRESULT SetNoShowBackgroundRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x6006000a), helpcontext(0x00009e3e)]
        HRESULT GetNoShowBackgroundRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x00009e3f)]
        HRESULT SetNoShowBackgroundRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), helpcontext(0x00009e40)]
        HRESULT GetSelectedElementRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x6006000d), helpcontext(0x00009e41)]
        HRESULT SetSelectedElementRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x6006000e), helpcontext(0x00009e42)]
        HRESULT GetSelectedElementRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x00009e43)]
        HRESULT SetSelectedElementRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060010), helpcontext(0x00009e44)]
        HRESULT GetSelectedEdgeRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060011), helpcontext(0x00009e45)]
        HRESULT SetSelectedEdgeRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060012), helpcontext(0x00009e46)]
        HRESULT GetSelectedEdgeRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060013), helpcontext(0x00009e47)]
        HRESULT SetSelectedEdgeRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060014), helpcontext(0x00009e48)]
        HRESULT GetPreselectedElementRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060015), helpcontext(0x00009e49)]
        HRESULT SetPreselectedElementRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060016), helpcontext(0x00009e4a)]
        HRESULT GetPreselectedElementRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060017), helpcontext(0x00009e4b)]
        HRESULT SetPreselectedElementRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060018), propget, helpcontext(0x00009e4c)]
        HRESULT PreselectedElementLinetype([out, retval] long* oPreselectedElementLinetype);
        [id(0x60060018), propput, helpcontext(0x00009e4c)]
        HRESULT PreselectedElementLinetype([in] long oPreselectedElementLinetype);
        [id(0x6006001a), helpcontext(0x00009e4d)]
        HRESULT GetPreselectedElementLinetypeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001b), helpcontext(0x00009e4e)]
        HRESULT SetPreselectedElementLinetypeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001c), helpcontext(0x00009e4f)]
        HRESULT GetUnderIntensifiedRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x6006001d), helpcontext(0x00009e50)]
        HRESULT SetUnderIntensifiedRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x6006001e), helpcontext(0x00009e51)]
        HRESULT GetUnderIntensifiedRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001f), helpcontext(0x00009e52)]
        HRESULT SetUnderIntensifiedRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060020), helpcontext(0x00009e53)]
        HRESULT GetUpdateNeededRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060021), helpcontext(0x00009e54)]
        HRESULT SetUpdateNeededRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060022), helpcontext(0x00009e55)]
        HRESULT GetUpdateNeededRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060023), helpcontext(0x00009e56)]
        HRESULT SetUpdateNeededRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060024), helpcontext(0x00009e57)]
        HRESULT GetHandlesRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x60060025), helpcontext(0x00009e58)]
        HRESULT SetHandlesRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x60060026), helpcontext(0x00009e59)]
        HRESULT GetHandlesRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060027), helpcontext(0x00009e5a)]
        HRESULT SetHandlesRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060028), propget, helpcontext(0x00009e5b)]
        HRESULT BorderEdgesMode([out, retval] VARIANT_BOOL* oBorderEdgesMode);
        [id(0x60060028), propput, helpcontext(0x00009e5b)]
        HRESULT BorderEdgesMode([in] VARIANT_BOOL oBorderEdgesMode);
        [id(0x6006002a), helpcontext(0x00009e5c)]
        HRESULT GetBorderEdgesModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006002b), helpcontext(0x00009e5d)]
        HRESULT SetBorderEdgesModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006002c), helpcontext(0x00009e5e)]
        HRESULT GetBorderEdgesRGB(
                        [in, out] long* ioR, 
                        [in, out] long* ioG, 
                        [in, out] long* ioB);
        [id(0x6006002d), helpcontext(0x00009e5f)]
        HRESULT SetBorderEdgesRGB(
                        [in] long iR, 
                        [in] long iG, 
                        [in] long iB);
        [id(0x6006002e), helpcontext(0x00009e60)]
        HRESULT GetBorderEdgesRGBInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006002f), helpcontext(0x00009e61)]
        HRESULT SetBorderEdgesRGBLock([in] VARIANT_BOOL iLocked);
        [id(0x60060030), propget, helpcontext(0x00009e62)]
        HRESULT BorderEdgesThickness([out, retval] long* oBorderEdgesThickness);
        [id(0x60060030), propput, helpcontext(0x00009e62)]
        HRESULT BorderEdgesThickness([in] long oBorderEdgesThickness);
        [id(0x60060032), helpcontext(0x00009e63)]
        HRESULT GetBorderEdgesThicknessInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060033), helpcontext(0x00009e64)]
        HRESULT SetBorderEdgesThicknessLock([in] VARIANT_BOOL iLocked);
        [id(0x60060034), propget, helpcontext(0x00009e65)]
        HRESULT AllZBufferElementMode([out, retval] VARIANT_BOOL* oAllZBufferElementMode);
        [id(0x60060034), propput, helpcontext(0x00009e65)]
        HRESULT AllZBufferElementMode([in] VARIANT_BOOL oAllZBufferElementMode);
        [id(0x60060036), helpcontext(0x00009e66)]
        HRESULT GetAllZBufferElementModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060037), helpcontext(0x00009e67)]
        HRESULT SetAllZBufferElementModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060038), propget, helpcontext(0x00009e68)]
        HRESULT AntiAliasingMode([out, retval] VARIANT_BOOL* oAntiAliasingMode);
        [id(0x60060038), propput, helpcontext(0x00009e68)]
        HRESULT AntiAliasingMode([in] VARIANT_BOOL oAntiAliasingMode);
        [id(0x6006003a), helpcontext(0x00009e69)]
        HRESULT GetAntiAliasingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006003b), helpcontext(0x00009e6a)]
        HRESULT SetAntiAliasingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006003c), propget, helpcontext(0x00009e6b)]
        HRESULT AntiAliasingOffset([out, retval] double* oAntiAliasingOffset);
        [id(0x6006003c), propput, helpcontext(0x00009e6b)]
        HRESULT AntiAliasingOffset([in] double oAntiAliasingOffset);
        [id(0x6006003e), helpcontext(0x00009e6c)]
        HRESULT GetAntiAliasingOffsetInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006003f), helpcontext(0x00009e6d)]
        HRESULT SetAntiAliasingOffsetLock([in] VARIANT_BOOL iLocked);
        [id(0x60060040), propget, helpcontext(0x00009e6e)]
        HRESULT FullSceneAntiAliasingMode([out, retval] CATFullSceneAntiAliasingMode* oFullSceneAntiAliasingMode);
        [id(0x60060040), propput, helpcontext(0x00009e6e)]
        HRESULT FullSceneAntiAliasingMode([in] CATFullSceneAntiAliasingMode oFullSceneAntiAliasingMode);
        [id(0x60060042), helpcontext(0x00009e6f)]
        HRESULT GetFullSceneAntiAliasingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060043), helpcontext(0x00009e70)]
        HRESULT SetFullSceneAntiAliasingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060044), propget, helpcontext(0x00009e71)]
        HRESULT StereoMode([out, retval] VARIANT_BOOL* oStereoMode);
        [id(0x60060044), propput, helpcontext(0x00009e71)]
        HRESULT StereoMode([in] VARIANT_BOOL oStereoMode);
        [id(0x60060046), helpcontext(0x00009e72)]
        HRESULT GetStereoModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060047), helpcontext(0x00009e73)]
        HRESULT SetStereoModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060048), propget, helpcontext(0x00009e74)]
        HRESULT DisplayCurrentScale([out, retval] VARIANT_BOOL* oDisplayCurrentScale);
        [id(0x60060048), propput, helpcontext(0x00009e74)]
        HRESULT DisplayCurrentScale([in] VARIANT_BOOL oDisplayCurrentScale);
        [id(0x6006004a), helpcontext(0x00009e75)]
        HRESULT GetDisplayCurrentScaleInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006004b), helpcontext(0x00009e76)]
        HRESULT SetDisplayCurrentScaleLock([in] VARIANT_BOOL iLocked);
        [id(0x6006004c), propget, helpcontext(0x00009e77)]
        HRESULT PreSelectionMode([out, retval] VARIANT_BOOL* ioPreSelectionMode);
        [id(0x6006004c), propput, helpcontext(0x00009e77)]
        HRESULT PreSelectionMode([in] VARIANT_BOOL ioPreSelectionMode);
        [id(0x6006004e), helpcontext(0x00009e78)]
        HRESULT GetPreSelectionModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006004f), helpcontext(0x00009e79)]
        HRESULT SetPreSelectionModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060050), propget, helpcontext(0x00009e7a)]
        HRESULT OtherSelectionTimeoutActivity([out, retval] VARIANT_BOOL* ioOtherSelectionTimeoutActivity);
        [id(0x60060050), propput, helpcontext(0x00009e7a)]
        HRESULT OtherSelectionTimeoutActivity([in] VARIANT_BOOL ioOtherSelectionTimeoutActivity);
        [id(0x60060052), helpcontext(0x00009e7b)]
        HRESULT GetOtherSelectionTimeoutActivityInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060053), helpcontext(0x00009e7c)]
        HRESULT SetOtherSelectionTimeoutActivityLock([in] VARIANT_BOOL iLocked);
        [id(0x60060054), propget, helpcontext(0x00009e7d)]
        HRESULT OtherSelectionTimeout([out, retval] double* ioOtherSelectionTimeout);
        [id(0x60060054), propput, helpcontext(0x00009e7d)]
        HRESULT OtherSelectionTimeout([in] double ioOtherSelectionTimeout);
        [id(0x60060056), helpcontext(0x00009e7e)]
        HRESULT GetOtherSelectionTimeoutInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060057), helpcontext(0x00009e7f)]
        HRESULT SetOtherSelectionTimeoutLock([in] VARIANT_BOOL iLocked);
        [id(0x60060058), propget, helpcontext(0x00009e80)]
        HRESULT NoZBufferSelectionMode([out, retval] VARIANT_BOOL* ioNoZBufferSelectionMode);
        [id(0x60060058), propput, helpcontext(0x00009e80)]
        HRESULT NoZBufferSelectionMode([in] VARIANT_BOOL ioNoZBufferSelectionMode);
        [id(0x6006005a), helpcontext(0x00009e81)]
        HRESULT GetNoZBufferSelectionModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006005b), helpcontext(0x00009e82)]
        HRESULT SetNoZBufferSelectionModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006005c), propget, helpcontext(0x00009e83)]
        HRESULT BoundingBoxSelectionMode([out, retval] VARIANT_BOOL* ioBoundingBoxSelectionMode);
        [id(0x6006005c), propput, helpcontext(0x00009e83)]
        HRESULT BoundingBoxSelectionMode([in] VARIANT_BOOL ioBoundingBoxSelectionMode);
        [id(0x6006005e), helpcontext(0x00009e84)]
        HRESULT GetBoundingBoxSelectionModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006005f), helpcontext(0x00009e85)]
        HRESULT SetBoundingBoxSelectionModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060060), propget, helpcontext(0x00009e86)]
        HRESULT MaxSelectionMove([out, retval] long* ioMaxSelectionMove);
        [id(0x60060060), propput, helpcontext(0x00009e86)]
        HRESULT MaxSelectionMove([in] long ioMaxSelectionMove);
        [id(0x60060062), helpcontext(0x00009e87)]
        HRESULT GetMaxSelectionMoveInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060063), helpcontext(0x00009e88)]
        HRESULT SetMaxSelectionMoveLock([in] VARIANT_BOOL iLocked);
        [id(0x60060064), propget, helpcontext(0x00009e89)]
        HRESULT DisplayDrillList([out, retval] VARIANT_BOOL* ioDisplayDrillList);
        [id(0x60060064), propput, helpcontext(0x00009e89)]
        HRESULT DisplayDrillList([in] VARIANT_BOOL ioDisplayDrillList);
        [id(0x60060066), helpcontext(0x00009e8a)]
        HRESULT GetDisplayDrillListInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060067), helpcontext(0x00009e8b)]
        HRESULT SetDisplayDrillListLock([in] VARIANT_BOOL iLocked);
        [id(0x60060068), propget, helpcontext(0x00009e8c)]
        HRESULT AuxiliaryDrillViewer([out, retval] VARIANT_BOOL* ioAuxiliaryDrillViewer);
        [id(0x60060068), propput, helpcontext(0x00009e8c)]
        HRESULT AuxiliaryDrillViewer([in] VARIANT_BOOL ioAuxiliaryDrillViewer);
        [id(0x6006006a), helpcontext(0x00009e8d)]
        HRESULT GetAuxiliaryDrillViewerInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006006b), helpcontext(0x00009e8e)]
        HRESULT SetAuxiliaryDrillViewerLock([in] VARIANT_BOOL iLocked);
        [id(0x6006006c), propget, helpcontext(0x00009e8f)]
        HRESULT FaceHLDrill([out, retval] VARIANT_BOOL* ioFaceHLDrill);
        [id(0x6006006c), propput, helpcontext(0x00009e8f)]
        HRESULT FaceHLDrill([in] VARIANT_BOOL ioFaceHLDrill);
        [id(0x6006006e), helpcontext(0x00009e90)]
        HRESULT GetFaceHLDrillInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006006f), helpcontext(0x00009e91)]
        HRESULT SetFaceHLDrillLock([in] VARIANT_BOOL iLocked);
        [id(0x60060070), propget, helpcontext(0x00009e92)]
        HRESULT DisplayImmersiveDrillViewer([out, retval] VARIANT_BOOL* ioDisplayImmersiveDrillViewer);
        [id(0x60060070), propput, helpcontext(0x00009e92)]
        HRESULT DisplayImmersiveDrillViewer([in] VARIANT_BOOL ioDisplayImmersiveDrillViewer);
        [id(0x60060072), helpcontext(0x00009e93)]
        HRESULT GetDisplayImmersiveDrillViewerInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060073), helpcontext(0x00009e94)]
        HRESULT SetDisplayImmersiveDrillViewerLock([in] VARIANT_BOOL iLocked);
        [id(0x60060074), propget, helpcontext(0x00009e95)]
        HRESULT Gravity([out, retval] VARIANT_BOOL* ioGravity);
        [id(0x60060074), propput, helpcontext(0x00009e95)]
        HRESULT Gravity([in] VARIANT_BOOL ioGravity);
        [id(0x60060076), helpcontext(0x00009e96)]
        HRESULT GetGravityInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060077), helpcontext(0x00009e97)]
        HRESULT SetGravityLock([in] VARIANT_BOOL iLocked);
        [id(0x60060078), propget, helpcontext(0x00009e98)]
        HRESULT GravityAxis([out, retval] long* ioGravityAxis);
        [id(0x60060078), propput, helpcontext(0x00009e98)]
        HRESULT GravityAxis([in] long ioGravityAxis);
        [id(0x6006007a), helpcontext(0x00009e99)]
        HRESULT GetGravityAxisInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006007b), helpcontext(0x00009e9a)]
        HRESULT SetGravityAxisLock([in] VARIANT_BOOL iLocked);
        [id(0x6006007c), propget, helpcontext(0x00009e9b)]
        HRESULT FollowGroundMode([out, retval] VARIANT_BOOL* ioFollowGroundMode);
        [id(0x6006007c), propput, helpcontext(0x00009e9b)]
        HRESULT FollowGroundMode([in] VARIANT_BOOL ioFollowGroundMode);
        [id(0x6006007e), helpcontext(0x00009e9c)]
        HRESULT GetFollowGroundModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006007f), helpcontext(0x00009e9d)]
        HRESULT SetFollowGroundModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060080), propget, helpcontext(0x00009e9e)]
        HRESULT FollowGroundAltitude([out, retval] double* ioFollowGroundAltitude);
        [id(0x60060080), propput, helpcontext(0x00009e9e)]
        HRESULT FollowGroundAltitude([in] double ioFollowGroundAltitude);
        [id(0x60060082), helpcontext(0x00009e9f)]
        HRESULT GetFollowGroundAltitudeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060083), helpcontext(0x00009ea0)]
        HRESULT SetFollowGroundAltitudeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060084), propget, helpcontext(0x00009ea1)]
        HRESULT ViewpointAnimationMode([out, retval] VARIANT_BOOL* ioViewpointAnimationMode);
        [id(0x60060084), propput, helpcontext(0x00009ea1)]
        HRESULT ViewpointAnimationMode([in] VARIANT_BOOL ioViewpointAnimationMode);
        [id(0x60060086), helpcontext(0x00009ea2)]
        HRESULT GetViewpointAnimationModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060087), helpcontext(0x00009ea3)]
        HRESULT SetViewpointAnimationModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060088), propget, helpcontext(0x00009ea4)]
        HRESULT RotationSphereMode([out, retval] VARIANT_BOOL* ioRotationSphereMode);
        [id(0x60060088), propput, helpcontext(0x00009ea4)]
        HRESULT RotationSphereMode([in] VARIANT_BOOL ioRotationSphereMode);
        [id(0x6006008a), helpcontext(0x00009ea5)]
        HRESULT GetRotationSphereModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006008b), helpcontext(0x00009ea6)]
        HRESULT SetRotationSphereModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006008c), propget, helpcontext(0x00009ea7)]
        HRESULT FlyCollisionMode([out, retval] VARIANT_BOOL* ioFlyCollisionMode);
        [id(0x6006008c), propput, helpcontext(0x00009ea7)]
        HRESULT FlyCollisionMode([in] VARIANT_BOOL ioFlyCollisionMode);
        [id(0x6006008e), helpcontext(0x00009ea8)]
        HRESULT GetFlyCollisionModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006008f), helpcontext(0x00009ea9)]
        HRESULT SetFlyCollisionModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060090), propget, helpcontext(0x00009eaa)]
        HRESULT FlyCollisionType([out, retval] long* ioFlyCollisionType);
        [id(0x60060090), propput, helpcontext(0x00009eaa)]
        HRESULT FlyCollisionType([in] long ioFlyCollisionType);
        [id(0x60060092), helpcontext(0x00009eab)]
        HRESULT GetFlyCollisionTypeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060093), helpcontext(0x00009eac)]
        HRESULT SetFlyCollisionTypeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060094), propget, helpcontext(0x00009ead)]
        HRESULT FlyCollisionSphereRadius([out, retval] double* ioFlyCollisionSphereRadius);
        [id(0x60060094), propput, helpcontext(0x00009ead)]
        HRESULT FlyCollisionSphereRadius([in] double ioFlyCollisionSphereRadius);
        [id(0x60060096), helpcontext(0x00009eae)]
        HRESULT GetFlyCollisionSphereRadiusInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060097), helpcontext(0x00009eaf)]
        HRESULT SetFlyCollisionSphereRadiusLock([in] VARIANT_BOOL iLocked);
        [id(0x60060098), propget, helpcontext(0x00009eb0)]
        HRESULT FlySensitivity([out, retval] long* ioFlySensitivity);
        [id(0x60060098), propput, helpcontext(0x00009eb0)]
        HRESULT FlySensitivity([in] long ioFlySensitivity);
        [id(0x6006009a), helpcontext(0x00009eb1)]
        HRESULT GetFlySensitivityInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006009b), helpcontext(0x00009eb2)]
        HRESULT SetFlySensitivityLock([in] VARIANT_BOOL iLocked);
        [id(0x6006009c), propget, helpcontext(0x00009eb3)]
        HRESULT FlySpeedMode([out, retval] long* ioFlySpeedMode);
        [id(0x6006009c), propput, helpcontext(0x00009eb3)]
        HRESULT FlySpeedMode([in] long ioFlySpeedMode);
        [id(0x6006009e), helpcontext(0x00009eb4)]
        HRESULT GetFlySpeedModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006009f), helpcontext(0x00009eb5)]
        HRESULT SetFlySpeedModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600a0), propget, helpcontext(0x00009eb6)]
        HRESULT FlySpeed([out, retval] long* ioFlySpeed);
        [id(0x600600a0), propput, helpcontext(0x00009eb6)]
        HRESULT FlySpeed([in] long ioFlySpeed);
        [id(0x600600a2), helpcontext(0x00009eb7)]
        HRESULT GetFlySpeedInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600a3), helpcontext(0x00009eb8)]
        HRESULT SetFlySpeedLock([in] VARIANT_BOOL iLocked);
        [id(0x600600a4), propget, helpcontext(0x00009eb9)]
        HRESULT MouseSpeedValue([out, retval] long* ioMouseSpeedValue);
        [id(0x600600a4), propput, helpcontext(0x00009eb9)]
        HRESULT MouseSpeedValue([in] long ioMouseSpeedValue);
        [id(0x600600a6), helpcontext(0x00009eba)]
        HRESULT GetMouseSpeedValueInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600a7), helpcontext(0x00009ebb)]
        HRESULT SetMouseSpeedValueLock([in] VARIANT_BOOL iLocked);
        [id(0x600600a8), propget, helpcontext(0x00009ebc)]
        HRESULT KeyboardRotationAngleValue([out, retval] long* ioKeyboardRotationAngleValue);
        [id(0x600600a8), propput, helpcontext(0x00009ebc)]
        HRESULT KeyboardRotationAngleValue([in] long ioKeyboardRotationAngleValue);
        [id(0x600600aa), helpcontext(0x00009ebd)]
        HRESULT GetKeyboardRotationAngleValueInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600ab), helpcontext(0x00009ebe)]
        HRESULT SetKeyboardRotationAngleValueLock([in] VARIANT_BOOL iLocked);
        [id(0x600600ac), propget, helpcontext(0x00009ebf)]
        HRESULT OcclusionCullingMode([out, retval] VARIANT_BOOL* ioOcclusionCullingMode);
        [id(0x600600ac), propput, helpcontext(0x00009ebf)]
        HRESULT OcclusionCullingMode([in] VARIANT_BOOL ioOcclusionCullingMode);
        [id(0x600600ae), helpcontext(0x00009ec0)]
        HRESULT GetOcclusionCullingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600af), helpcontext(0x00009ec1)]
        HRESULT SetOcclusionCullingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600b0), propget, helpcontext(0x00009ec2)]
        HRESULT Viz3DAccuracyMode([out, retval] VARIANT_BOOL* io3DAccuracyMode);
        [id(0x600600b0), propput, helpcontext(0x00009ec2)]
        HRESULT Viz3DAccuracyMode([in] VARIANT_BOOL io3DAccuracyMode);
        [id(0x600600b2), helpcontext(0x00009ec3)]
        HRESULT GetViz3DAccuracyModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600b3), helpcontext(0x00009ec4)]
        HRESULT SetViz3DAccuracyModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600b4), propget, helpcontext(0x00009ec5)]
        HRESULT Viz3DProportionnalAccuracy([out, retval] double* io3DProportionnalAccuracy);
        [id(0x600600b4), propput, helpcontext(0x00009ec5)]
        HRESULT Viz3DProportionnalAccuracy([in] double io3DProportionnalAccuracy);
        [id(0x600600b6), helpcontext(0x00009ec6)]
        HRESULT GetViz3DProportionnalAccuracyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600b7), helpcontext(0x00009ec7)]
        HRESULT SetViz3DProportionnalAccuracyLock([in] VARIANT_BOOL iLocked);
        [id(0x600600b8), propget, helpcontext(0x00009ec8)]
        HRESULT Viz3DFixedAccuracy([out, retval] double* io3DFixedAccuracy);
        [id(0x600600b8), propput, helpcontext(0x00009ec8)]
        HRESULT Viz3DFixedAccuracy([in] double io3DFixedAccuracy);
        [id(0x600600ba), helpcontext(0x00009ec9)]
        HRESULT GetViz3DFixedAccuracyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600bb), helpcontext(0x00009eca)]
        HRESULT SetViz3DFixedAccuracyLock([in] VARIANT_BOOL iLocked);
        [id(0x600600bc), propget, helpcontext(0x00009ecb)]
        HRESULT Viz3DCurveAccuracy([out, retval] double* io3DCurveAccuracy);
        [id(0x600600bc), propput, helpcontext(0x00009ecb)]
        HRESULT Viz3DCurveAccuracy([in] double io3DCurveAccuracy);
        [id(0x600600be), helpcontext(0x00009ecc)]
        HRESULT GetViz3DCurveAccuracyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600bf), helpcontext(0x00009ecd)]
        HRESULT SetViz3DCurveAccuracyLock([in] VARIANT_BOOL iLocked);
        [id(0x600600c0), propget, helpcontext(0x00009ece)]
        HRESULT Viz2DAccuracyMode([out, retval] VARIANT_BOOL* io2DAccuracyMode);
        [id(0x600600c0), propput, helpcontext(0x00009ece)]
        HRESULT Viz2DAccuracyMode([in] VARIANT_BOOL io2DAccuracyMode);
        [id(0x600600c2), helpcontext(0x00009ecf)]
        HRESULT GetViz2DAccuracyModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600c3), helpcontext(0x00009ed0)]
        HRESULT SetViz2DAccuracyModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600c4), propget, helpcontext(0x00009ed1)]
        HRESULT Viz2DProportionnalAccuracy([out, retval] double* io2DProportionnalAccuracy);
        [id(0x600600c4), propput, helpcontext(0x00009ed1)]
        HRESULT Viz2DProportionnalAccuracy([in] double io2DProportionnalAccuracy);
        [id(0x600600c6), helpcontext(0x00009ed2)]
        HRESULT GetViz2DProportionnalAccuracyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600c7), helpcontext(0x00009ed3)]
        HRESULT SetViz2DProportionnalAccuracyLock([in] VARIANT_BOOL iLocked);
        [id(0x600600c8), propget, helpcontext(0x00009ed4)]
        HRESULT Viz2DFixedAccuracy([out, retval] double* io2DFixedAccuracy);
        [id(0x600600c8), propput, helpcontext(0x00009ed4)]
        HRESULT Viz2DFixedAccuracy([in] double io2DFixedAccuracy);
        [id(0x600600ca), helpcontext(0x00009ed5)]
        HRESULT GetViz2DFixedAccuracyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600cb), helpcontext(0x00009ed6)]
        HRESULT SetViz2DFixedAccuracyLock([in] VARIANT_BOOL iLocked);
        [id(0x600600cc), propget, helpcontext(0x00009ed7)]
        HRESULT StaticLOD([out, retval] double* ioStaticLOD);
        [id(0x600600cc), propput, helpcontext(0x00009ed7)]
        HRESULT StaticLOD([in] double ioStaticLOD);
        [id(0x600600ce), helpcontext(0x00009ed8)]
        HRESULT GetStaticLODInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600cf), helpcontext(0x00009ed9)]
        HRESULT SetStaticLODLock([in] VARIANT_BOOL iLocked);
        [id(0x600600d0), propget, helpcontext(0x00009eda)]
        HRESULT DynamicLOD([out, retval] double* ioDynamicLOD);
        [id(0x600600d0), propput, helpcontext(0x00009eda)]
        HRESULT DynamicLOD([in] double ioDynamicLOD);
        [id(0x600600d2), helpcontext(0x00009edb)]
        HRESULT GetDynamicLODInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600d3), helpcontext(0x00009edc)]
        HRESULT SetDynamicLODLock([in] VARIANT_BOOL iLocked);
        [id(0x600600d4), propget, helpcontext(0x00009edd)]
        HRESULT StaticCull([out, retval] long* ioStaticCull);
        [id(0x600600d4), propput, helpcontext(0x00009edd)]
        HRESULT StaticCull([in] long ioStaticCull);
        [id(0x600600d6), helpcontext(0x00009ede)]
        HRESULT GetStaticCullInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600d7), helpcontext(0x00009edf)]
        HRESULT SetStaticCullLock([in] VARIANT_BOOL iLocked);
        [id(0x600600d8), propget, helpcontext(0x00009ee0)]
        HRESULT DynamicCull([out, retval] long* ioDynamicCull);
        [id(0x600600d8), propput, helpcontext(0x00009ee0)]
        HRESULT DynamicCull([in] long ioDynamicCull);
        [id(0x600600da), helpcontext(0x00009ee1)]
        HRESULT GetDynamicCullInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600db), helpcontext(0x00009ee2)]
        HRESULT SetDynamicCullLock([in] VARIANT_BOOL iLocked);
        [id(0x600600dc), propget, helpcontext(0x00009ee3)]
        HRESULT TransparencyMode([out, retval] VARIANT_BOOL* ioTransparencyMode);
        [id(0x600600dc), propput, helpcontext(0x00009ee3)]
        HRESULT TransparencyMode([in] VARIANT_BOOL ioTransparencyMode);
        [id(0x600600de), helpcontext(0x00009ee4)]
        HRESULT GetTransparencyModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600df), helpcontext(0x00009ee5)]
        HRESULT SetTransparencyModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600e0), propget, helpcontext(0x00009ee6)]
        HRESULT MinimumFPSMode([out, retval] VARIANT_BOOL* ioMinimumFPSMode);
        [id(0x600600e0), propput, helpcontext(0x00009ee6)]
        HRESULT MinimumFPSMode([in] VARIANT_BOOL ioMinimumFPSMode);
        [id(0x600600e2), helpcontext(0x00009ee7)]
        HRESULT GetMinimumFPSModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600e3), helpcontext(0x00009ee8)]
        HRESULT SetMinimumFPSModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600e4), propget, helpcontext(0x00009ee9)]
        HRESULT NumberOfMinimumFPS([out, retval] long* ioNumberOfMinimumFPS);
        [id(0x600600e4), propput, helpcontext(0x00009ee9)]
        HRESULT NumberOfMinimumFPS([in] long ioNumberOfMinimumFPS);
        [id(0x600600e6), helpcontext(0x00009eea)]
        HRESULT GetNumberOfMinimumFPSInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600e7), helpcontext(0x00009eeb)]
        HRESULT SetNumberOfMinimumFPSLock([in] VARIANT_BOOL iLocked);
        [id(0x600600e8), propget, helpcontext(0x00009eec)]
        HRESULT MinimumSpaceFPSMode([out, retval] VARIANT_BOOL* ioMinimumSpaceFPSMode);
        [id(0x600600e8), propput, helpcontext(0x00009eec)]
        HRESULT MinimumSpaceFPSMode([in] VARIANT_BOOL ioMinimumSpaceFPSMode);
        [id(0x600600ea), helpcontext(0x00009eed)]
        HRESULT GetMinimumSpaceFPSModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600eb), helpcontext(0x00009eee)]
        HRESULT SetMinimumSpaceFPSModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600ec), propget, helpcontext(0x00009eef)]
        HRESULT NumberOfMinimumSpaceFPS([out, retval] long* ioNumberOfMinimumSpaceFPS);
        [id(0x600600ec), propput, helpcontext(0x00009eef)]
        HRESULT NumberOfMinimumSpaceFPS([in] long ioNumberOfMinimumSpaceFPS);
        [id(0x600600ee), helpcontext(0x00009ef0)]
        HRESULT GetNumberOfMinimumSpaceFPSInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600ef), helpcontext(0x00009ef1)]
        HRESULT SetNumberOfMinimumSpaceFPSLock([in] VARIANT_BOOL iLocked);
        [id(0x600600f0), propget, helpcontext(0x00009ef2)]
        HRESULT IsoparGenerationMode([out, retval] VARIANT_BOOL* ioIsoparGenerationMode);
        [id(0x600600f0), propput, helpcontext(0x00009ef2)]
        HRESULT IsoparGenerationMode([in] VARIANT_BOOL ioIsoparGenerationMode);
        [id(0x600600f2), helpcontext(0x00009ef3)]
        HRESULT GetIsoparGenerationModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600f3), helpcontext(0x00009ef4)]
        HRESULT SetIsoparGenerationModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600f4), propget, helpcontext(0x00009ef5)]
        HRESULT NbIsopars([out, retval] long* ioNbIsopars);
        [id(0x600600f4), propput, helpcontext(0x00009ef5)]
        HRESULT NbIsopars([in] long ioNbIsopars);
        [id(0x600600f6), helpcontext(0x00009ef6)]
        HRESULT GetNbIsoparsInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600f7), helpcontext(0x00009ef7)]
        HRESULT SetNbIsoparsLock([in] VARIANT_BOOL iLocked);
        [id(0x600600f8), propget, helpcontext(0x00009ef8)]
        HRESULT TwoSideLightingMode([out, retval] VARIANT_BOOL* ioTwoSideLightingMode);
        [id(0x600600f8), propput, helpcontext(0x00009ef8)]
        HRESULT TwoSideLightingMode([in] VARIANT_BOOL ioTwoSideLightingMode);
        [id(0x600600fa), helpcontext(0x00009ef9)]
        HRESULT GetTwoSideLightingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x600600fb), helpcontext(0x00009efa)]
        HRESULT SetTwoSideLightingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x600600fc), propget, helpcontext(0x00009efb)]
        HRESULT BackFaceCullingMode([out, retval] VARIANT_BOOL* ioBackFaceCullingMode);
        [id(0x600600fc), propput, helpcontext(0x00009efb)]
        HRESULT BackFaceCullingMode([in] VARIANT_BOOL ioBackFaceCullingMode);
        [id(0x600600fe), helpcontext(0x00009efc)]
        HRESULT GetBackFaceCullingMode([out, retval] CATBackFaceCullingMode* ioBackFaceCullingMode);
        [id(0x600600ff), helpcontext(0x00009efd)]
        HRESULT PutBackFaceCullingMode([in] CATBackFaceCullingMode iBackFaceCullingMode);
        [id(0x60060100), helpcontext(0x00009efe)]
        HRESULT GetBackFaceCullingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060101), helpcontext(0x00009eff)]
        HRESULT SetBackFaceCullingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060102), propget, helpcontext(0x00009f00)]
        HRESULT LightViewerMode([out, retval] VARIANT_BOOL* ioLightViewerMode);
        [id(0x60060102), propput, helpcontext(0x00009f00)]
        HRESULT LightViewerMode([in] VARIANT_BOOL ioLightViewerMode);
        [id(0x60060104), helpcontext(0x00009f01)]
        HRESULT GetLightViewerModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060105), helpcontext(0x00009f02)]
        HRESULT SetLightViewerModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060106), propget, helpcontext(0x00009f03)]
        HRESULT LineicCgrMode([out, retval] VARIANT_BOOL* ioLineicCgrMode);
        [id(0x60060106), propput, helpcontext(0x00009f03)]
        HRESULT LineicCgrMode([in] VARIANT_BOOL ioLineicCgrMode);
        [id(0x60060108), helpcontext(0x00009f04)]
        HRESULT GetLineicCgrModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060109), helpcontext(0x00009f05)]
        HRESULT SetLineicCgrModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006010a), propget, helpcontext(0x00009f06)]
        HRESULT ShaderMode([out, retval] VARIANT_BOOL* ioShaderMode);
        [id(0x6006010a), propput, helpcontext(0x00009f06)]
        HRESULT ShaderMode([in] VARIANT_BOOL ioShaderMode);
        [id(0x6006010c), helpcontext(0x00009f07)]
        HRESULT GetShaderModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006010d), helpcontext(0x00009f08)]
        HRESULT SetShaderModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006010e), propget, helpcontext(0x00009f09)]
        HRESULT HaloMode([out, retval] VARIANT_BOOL* ioHaloMode);
        [id(0x6006010e), propput, helpcontext(0x00009f09)]
        HRESULT HaloMode([in] VARIANT_BOOL ioHaloMode);
        [id(0x60060110), helpcontext(0x00009f0a)]
        HRESULT GetHaloModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060111), helpcontext(0x00009f0b)]
        HRESULT SetHaloModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060112), propget, helpcontext(0x00009f0c)]
        HRESULT PickingWindowSize([out, retval] long* ioPickingWindowSize);
        [id(0x60060112), propput, helpcontext(0x00009f0c)]
        HRESULT PickingWindowSize([in] long ioPickingWindowSize);
        [id(0x60060114), helpcontext(0x00009f0d)]
        HRESULT GetPickingWindowSizeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060115), helpcontext(0x00009f0e)]
        HRESULT SetPickingWindowSizeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060116), propget, helpcontext(0x00009f0f)]
        HRESULT AccuratePickingMode([out, retval] VARIANT_BOOL* ioAccuratePickingMode);
        [id(0x60060116), propput, helpcontext(0x00009f0f)]
        HRESULT AccuratePickingMode([in] VARIANT_BOOL ioAccuratePickingMode);
        [id(0x60060118), helpcontext(0x00009f10)]
        HRESULT GetAccuratePickingModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060119), helpcontext(0x00009f11)]
        HRESULT SetAccuratePickingModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006011a), propget, helpcontext(0x00009f12)]
        HRESULT AccuratePickingWindowSize([out, retval] long* ioAccuratePickingWindowSize);
        [id(0x6006011a), propput, helpcontext(0x00009f12)]
        HRESULT AccuratePickingWindowSize([in] long ioAccuratePickingWindowSize);
        [id(0x6006011c), helpcontext(0x00009f13)]
        HRESULT GetAccuratePickingWindowSizeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006011d), helpcontext(0x00009f14)]
        HRESULT SetAccuratePickingWindowSizeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006011e), propget, helpcontext(0x00009f15)]
        HRESULT MouseDoubleClicDelay([out, retval] long* ioMouseDoubleClicDelay);
        [id(0x6006011e), propput, helpcontext(0x00009f15)]
        HRESULT MouseDoubleClicDelay([in] long ioMouseDoubleClicDelay);
        [id(0x60060120), helpcontext(0x00009f16)]
        HRESULT GetMouseDoubleClicDelayInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060121), helpcontext(0x00009f17)]
        HRESULT SetMouseDoubleClicDelayLock([in] VARIANT_BOOL iLocked);
        [id(0x60060122), propget, helpcontext(0x00009f18)]
        HRESULT AmbientActivation([out, retval] long* ioAmbientActivation);
        [id(0x60060122), propput, helpcontext(0x00009f18)]
        HRESULT AmbientActivation([in] long ioAmbientActivation);
        [id(0x60060124), helpcontext(0x00009f19)]
        HRESULT GetAmbientActivationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060125), helpcontext(0x00009f1a)]
        HRESULT SetAmbientActivationLock([in] VARIANT_BOOL iLocked);
        [id(0x60060126), propget, helpcontext(0x00009f1b)]
        HRESULT DefaultDiffuseAmbientCoefficient([out, retval] double* ioDefaultDiffuseAmbientCoefficient);
        [id(0x60060126), propput, helpcontext(0x00009f1b)]
        HRESULT DefaultDiffuseAmbientCoefficient([in] double ioDefaultDiffuseAmbientCoefficient);
        [id(0x60060128), helpcontext(0x00009f1c)]
        HRESULT GetDefaultDiffuseAmbientCoefficientInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060129), helpcontext(0x00009f1d)]
        HRESULT SetDefaultDiffuseAmbientCoefficientLock([in] VARIANT_BOOL iLocked);
        [id(0x6006012a), propget, helpcontext(0x00009f1e)]
        HRESULT DefaultSpecularCoefficient([out, retval] double* ioDefaultSpecularCoefficient);
        [id(0x6006012a), propput, helpcontext(0x00009f1e)]
        HRESULT DefaultSpecularCoefficient([in] double ioDefaultSpecularCoefficient);
        [id(0x6006012c), helpcontext(0x00009f1f)]
        HRESULT GetDefaultSpecularCoefficientInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006012d), helpcontext(0x00009f20)]
        HRESULT SetDefaultSpecularCoefficientLock([in] VARIANT_BOOL iLocked);
        [id(0x6006012e), propget, helpcontext(0x00009f21)]
        HRESULT DefaultShininess([out, retval] double* ioDefaultShininess);
        [id(0x6006012e), propput, helpcontext(0x00009f21)]
        HRESULT DefaultShininess([in] double ioDefaultShininess);
        [id(0x60060130), helpcontext(0x00009f22)]
        HRESULT GetDefaultShininessInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060131), helpcontext(0x00009f23)]
        HRESULT SetDefaultShininessLock([in] VARIANT_BOOL iLocked);
    };

    

    [
      odl,
      uuid(67FF8DE5-294F-4B50-BE3F-27E6D6498D84),
      helpcontext(0x00008e94),
      dual,
      oleautomation
    ]
    interface TreeVizManipSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00008e95)]
        HRESULT Type([out, retval] CatTreeTypeEnum* oType);
        [id(0x60060000), propput, helpcontext(0x00008e95)]
        HRESULT Type([in] CatTreeTypeEnum oType);
        [id(0x60060002), helpcontext(0x00008e96)]
        HRESULT GetTypeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00008e97)]
        HRESULT SetTypeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x00008e98)]
        HRESULT Orientation([out, retval] CatTreeOrientationEnum* oOrientation);
        [id(0x60060004), propput, helpcontext(0x00008e98)]
        HRESULT Orientation([in] CatTreeOrientationEnum oOrientation);
        [id(0x60060006), helpcontext(0x00008e99)]
        HRESULT GetOrientationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x00008e9a)]
        HRESULT SetOrientationLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x00008e9b)]
        HRESULT SizeType([out, retval] CatTreeSizeTypeEnum* oSizeType);
        [id(0x60060008), propput, helpcontext(0x00008e9b)]
        HRESULT SizeType([in] CatTreeSizeTypeEnum oSizeType);
        [id(0x6006000a), helpcontext(0x00008e9c)]
        HRESULT GetSizeTypeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x00008e9d)]
        HRESULT SetSizeTypeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), propget, helpcontext(0x00008e9e)]
        HRESULT Size([out, retval] long* oSize);
        [id(0x6006000c), propput, helpcontext(0x00008e9e)]
        HRESULT Size([in] long oSize);
        [id(0x6006000e), propget, helpcontext(0x00008e9f)]
        HRESULT ShowActivation([out, retval] VARIANT_BOOL* oShowActivation);
        [id(0x6006000e), propput, helpcontext(0x00008e9f)]
        HRESULT ShowActivation([in] VARIANT_BOOL oShowActivation);
        [id(0x60060010), helpcontext(0x00008ea0)]
        HRESULT GetShowActivationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060011), helpcontext(0x00008ea1)]
        HRESULT SetShowActivationLock([in] VARIANT_BOOL iLocked);
        [id(0x60060012), propget, helpcontext(0x00008ea2)]
        HRESULT DisplayGeomOnScrolling([out, retval] VARIANT_BOOL* oDisplayGeomOnScrolling);
        [id(0x60060012), propput, helpcontext(0x00008ea2)]
        HRESULT DisplayGeomOnScrolling([in] VARIANT_BOOL oDisplayGeomOnScrolling);
        [id(0x60060014), helpcontext(0x00008ea3)]
        HRESULT GetDisplayGeomOnScrollingInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060015), helpcontext(0x00008ea4)]
        HRESULT SetDisplayGeomOnScrollingLock([in] VARIANT_BOOL iLocked);
        [id(0x60060016), propget, helpcontext(0x00008ea5)]
        HRESULT AutoExpandActivation([out, retval] VARIANT_BOOL* oAutoExpandActivation);
        [id(0x60060016), propput, helpcontext(0x00008ea5)]
        HRESULT AutoExpandActivation([in] VARIANT_BOOL oAutoExpandActivation);
        [id(0x60060018), helpcontext(0x00008ea6)]
        HRESULT GetAutoExpandActivationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060019), helpcontext(0x00008ea7)]
        HRESULT SetAutoExpandActivationLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001a), propget, helpcontext(0x00008ea8)]
        HRESULT ArcSelectionActivation([out, retval] VARIANT_BOOL* oArcSelectionActivation);
        [id(0x6006001a), propput, helpcontext(0x00008ea8)]
        HRESULT ArcSelectionActivation([in] VARIANT_BOOL oArcSelectionActivation);
        [id(0x6006001c), helpcontext(0x00008ea9)]
        HRESULT GetArcSelectionActivationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001d), helpcontext(0x00008eaa)]
        HRESULT SetArcSelectionActivationLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001e), propget, helpcontext(0x00008eab)]
        HRESULT AutoScrollActivation([out, retval] VARIANT_BOOL* oAutoScrollActivation);
        [id(0x6006001e), propput, helpcontext(0x00008eab)]
        HRESULT AutoScrollActivation([in] VARIANT_BOOL oAutoScrollActivation);
        [id(0x60060020), helpcontext(0x00008eac)]
        HRESULT GetAutoScrollActivationInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060021), helpcontext(0x00008ead)]
        HRESULT SetAutoScrollActivationLock([in] VARIANT_BOOL iLocked);
    };

 

    [
      odl,
      uuid(FCA1E9F8-EC62-4E5A-8678-2783B0E7B192),
      helpcontext(0x00006f54),
      dual,
      oleautomation
    ]
    interface SearchSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00006f55)]
        HRESULT DefaultPowerInputPrefix([out, retval] BSTR* oPrefix);
        [id(0x60060000), propput, helpcontext(0x00006f55)]
        HRESULT DefaultPowerInputPrefix([in] BSTR* oPrefix);
        [id(0x60060002), helpcontext(0x00006f56)]
        HRESULT GetDefaultPowerInputPrefixInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00006f57)]
        HRESULT SetDefaultPowerInputPrefixLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x00006f58)]
        HRESULT DefaultPowerInputContextScope([out, retval] CATSearchContextScope* oScope);
        [id(0x60060004), propput, helpcontext(0x00006f58)]
        HRESULT DefaultPowerInputContextScope([in] CATSearchContextScope oScope);
        [id(0x60060006), helpcontext(0x00006f59)]
        HRESULT GetDefaultPowerInputContextScopeInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x00006f5a)]
        HRESULT SetDefaultPowerInputContextScopeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x00006f5b)]
        HRESULT DefaultPowerInputContextPriority([out, retval] VARIANT_BOOL* oPriority);
        [id(0x60060008), propput, helpcontext(0x00006f5b)]
        HRESULT DefaultPowerInputContextPriority([in] VARIANT_BOOL oPriority);
        [id(0x6006000a), helpcontext(0x00006f5c)]
        HRESULT GetDefaultPowerInputContextPriorityInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x00006f5d)]
        HRESULT SetDefaultPowerInputContextPriorityLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), propget, helpcontext(0x00006f5e)]
        HRESULT DeepSearchActivation([out, retval] VARIANT_BOOL* oActivation);
        [id(0x6006000c), propput, helpcontext(0x00006f5e)]
        HRESULT DeepSearchActivation([in] VARIANT_BOOL oActivation);
        [id(0x6006000e), helpcontext(0x00006f5f)]
        HRESULT GetDeepSearchActivationInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x00006f60)]
        HRESULT SetDeepSearchActivationLock([in] VARIANT_BOOL iLocked);
        [id(0x60060010), propget, helpcontext(0x00006f61)]
        HRESULT MaxDisplayedResults([out, retval] long* oValue);
        [id(0x60060010), propput, helpcontext(0x00006f61)]
        HRESULT MaxDisplayedResults([in] long oValue);
        [id(0x60060012), helpcontext(0x00006f62)]
        HRESULT GetMaxDisplayedResultsInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060013), helpcontext(0x00006f63)]
        HRESULT SetMaxDisplayedResultsLock([in] VARIANT_BOOL iLocked);
        [id(0x60060014), propget, helpcontext(0x00006f64)]
        HRESULT MaxPreHighlightedElements([out, retval] long* oValue);
        [id(0x60060014), propput, helpcontext(0x00006f64)]
        HRESULT MaxPreHighlightedElements([in] long oValue);
        [id(0x60060016), helpcontext(0x00006f65)]
        HRESULT GetMaxPreHighlightedElementsInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060017), helpcontext(0x00006f66)]
        HRESULT SetMaxPreHighlightedElementsLock([in] VARIANT_BOOL iLocked);
    };

    

    [
      odl,
      uuid(401DD642-B5CF-486F-B237-B471F97A9DC0),
      helpcontext(0x00006784),
      dual,
      oleautomation
    ]
    interface PrintersSettingAtt : SettingController {
        [id(0x60060000), helpcontext(0x00006785)]
        HRESULT GetPrinterDirectories([out, retval] SAFEARRAY(VARIANT)* oPrinterDirs);
        [id(0x60060001), helpcontext(0x00006786)]
        HRESULT GetPrinterDirectoryState(
                        [in] BSTR* iPrinterDir, 
                        [out, retval] CatPrinterDirState* oPrinterDirState);
        [id(0x60060002), helpcontext(0x00006787)]
        HRESULT AddPrinterDirectory(
                        [in] BSTR* iPrinterDir, 
                        [in] CatPrinterDirState iPrinterDirState);
        [id(0x60060003), helpcontext(0x00006788)]
        HRESULT ModifyPrinterDirectoryState(
                        [in] BSTR* iPrinterDir, 
                        [in] CatPrinterDirState iPrinterDirState);
        [id(0x60060004), helpcontext(0x00006789)]
        HRESULT RemovePrinterDirectory([in] BSTR* iPrinterDir);
        [id(0x60060005), helpcontext(0x0000678a)]
        HRESULT RemoveAllPrinterDirectories();
        [id(0x60060006), helpcontext(0x0000678b)]
        HRESULT SetPrinterDirectoriesLock([in] VARIANT_BOOL iLock);
        [id(0x60060007), helpcontext(0x0000678c)]
        HRESULT GetPrinterDirectoriesInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060008), helpcontext(0x0000678d)]
        HRESULT GetNewPrinterDirectory([in, out] BSTR* oNewPrinterDir);
        [id(0x60060009), helpcontext(0x0000678e)]
        HRESULT SetNewPrinterDirectory([in] BSTR* iNewPrinterDir);
        [id(0x6006000a), helpcontext(0x0000678f)]
        HRESULT SetNewPrinterDirectoryLock([in] VARIANT_BOOL iLock);
        [id(0x6006000b), helpcontext(0x00006790)]
        HRESULT GetNewPrinterDirectoryInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000c), helpcontext(0x00006791)]
        HRESULT GetDriverConfigurationPath([in, out] BSTR* oDriverCfgPath);
        [id(0x6006000d), helpcontext(0x00006792)]
        HRESULT SetDriverConfigurationPath([in] BSTR* iDriverCfgPath);
        [id(0x6006000e), helpcontext(0x00006793)]
        HRESULT SetDriverConfigurationPathLock([in] VARIANT_BOOL iLock);
        [id(0x6006000f), helpcontext(0x00006794)]
        HRESULT GetDriverConfigurationPathInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060010), helpcontext(0x00006795)]
        HRESULT GetPrinterGroups([out, retval] SAFEARRAY(VARIANT)* oPrinterGroupNames);
        [id(0x60060011), helpcontext(0x00006796)]
        HRESULT GetPrinterArrayForGroup(
                        [in] BSTR* iPrinterGroupName, 
                        [out, retval] SAFEARRAY(VARIANT)* oPrinterNames);
        [id(0x60060012), helpcontext(0x00006797)]
        HRESULT AddPrinterGroup(
                        [in] BSTR* iPrinterGroupName, 
                        [in] SAFEARRAY(VARIANT) iPrinterNames);
        [id(0x60060013), helpcontext(0x00006798)]
        HRESULT ModifyPrinterArrayForGroup(
                        [in] BSTR* iPrinterGroupName, 
                        [in] SAFEARRAY(VARIANT) iPrinterNames);
        [id(0x60060014), helpcontext(0x00006799)]
        HRESULT RemovePrinterGroup([in] BSTR* iPrinterGroupName);
        [id(0x60060015), helpcontext(0x0000679a)]
        HRESULT RemoveAllPrinterGroups();
        [id(0x60060016), helpcontext(0x0000679b)]
        HRESULT SetPrinterGroupsLock([in] VARIANT_BOOL iLock);
        [id(0x60060017), helpcontext(0x0000679c)]
        HRESULT GetPrinterGroupsInfo(
                        [in, out] BSTR* oAdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    

    [
      odl,
      uuid(ABED1E5F-011A-0000-0280-03110E000000),
      helpcontext(0x000057e4),
      dual,
      oleautomation
    ]
    interface MemoryWarningSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x000057e5)]
        HRESULT ActivationState([out, retval] VARIANT_BOOL* oActivationState);
        [id(0x60060000), propput, helpcontext(0x000057e5)]
        HRESULT ActivationState([in] VARIANT_BOOL oActivationState);
        [id(0x60060002), helpcontext(0x000057e6)]
        HRESULT SetActivationStateLock([in] VARIANT_BOOL iLocked);
        [id(0x60060003), helpcontext(0x000057e7)]
        HRESULT GetActivationStateInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060004), propget, helpcontext(0x000057e8)]
        HRESULT UsageLimit([out, retval] long* oMaxLimit);
        [id(0x60060004), propput, helpcontext(0x000057e8)]
        HRESULT UsageLimit([in] long oMaxLimit);
        [id(0x60060006), helpcontext(0x000057e9)]
        HRESULT SetUsageLimitLock([in] VARIANT_BOOL iLocked);
        [id(0x60060007), helpcontext(0x000057ea)]
        HRESULT GetUsageLimitInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(EBB4B244-54F1-4785-AB69-0ABD662347DA),
      helpcontext(0x000053fc),
      dual,
      oleautomation
    ]
    interface MacrosSettingAtt : SettingController {
        [id(0x60060000), helpcontext(0x000053fd)]
        HRESULT GetLanguageEditor(
                        [in] CATScriptLanguage iLanguage, 
                        [out, retval] BSTR* oEditorPath);
        [id(0x60060001), helpcontext(0x000053fe)]
        HRESULT SetLanguageEditor(
                        [in] CATScriptLanguage iLanguage, 
                        [in] BSTR* iEditorPath);
        [id(0x60060002), helpcontext(0x000053ff)]
        HRESULT SetLanguageEditorLock([in] VARIANT_BOOL iLocked);
        [id(0x60060003), helpcontext(0x00005400)]
        HRESULT GetLanguageEditorInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060004), helpcontext(0x00005401)]
        HRESULT GetExternalReferences([out, retval] SAFEARRAY(VARIANT)* oReferences);
        [id(0x60060005), helpcontext(0x00005402)]
        HRESULT SetExternalReferences([in] SAFEARRAY(VARIANT) iReferences);
        [id(0x60060006), helpcontext(0x00005403)]
        HRESULT SetExternalReferencesLock([in] VARIANT_BOOL iLocked);
        [id(0x60060007), helpcontext(0x00005404)]
        HRESULT GetExternalReferencesInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060008), helpcontext(0x00005405)]
        HRESULT GetDefaultMacroLibraries([out, retval] SAFEARRAY(VARIANT)* oLibraries);
        [id(0x60060009), helpcontext(0x00005406)]
        HRESULT SetDefaultMacroLibraries([in] SAFEARRAY(VARIANT) iLibraries);
        [id(0x6006000a), helpcontext(0x00005407)]
        HRESULT SetDefaultMacroLibrariesLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000b), helpcontext(0x00005408)]
        HRESULT GetDefaultMacroLibrariesInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(F795B0AA-3C3B-42F6-B0C2-5F5A0CBDFFA1),
      helpcontext(0x00004e20),
      dual,
      oleautomation
    ]
    interface LicenseSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00004e21)]
        HRESULT DemoMode([out, retval] VARIANT_BOOL* oDemoMode);
        [id(0x60060000), propput, helpcontext(0x00004e21)]
        HRESULT DemoMode([in] VARIANT_BOOL oDemoMode);
        [id(0x60060002), helpcontext(0x00004e22)]
        HRESULT GetDemoModeInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00004e23)]
        HRESULT SetDemoModeLock([in] VARIANT_BOOL iLock);
        [id(0x60060004), propget, helpcontext(0x00004e24)]
        HRESULT ServerTimeOut([out, retval] float* oTimeOut);
        [id(0x60060004), propput, helpcontext(0x00004e24)]
        HRESULT ServerTimeOut([in] float oTimeOut);
        [id(0x60060006), helpcontext(0x00004e25)]
        HRESULT GetServerTimeOutInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x00004e26)]
        HRESULT SetServerTimeOutLock([in] VARIANT_BOOL iLock);
        [id(0x60060008), propget, helpcontext(0x00004e27)]
        HRESULT NodelockAlert([out, retval] long* oAlert);
        [id(0x60060008), propput, helpcontext(0x00004e27)]
        HRESULT NodelockAlert([in] long oAlert);
        [id(0x6006000a), helpcontext(0x00004e28)]
        HRESULT GetNodelockAlertInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x00004e29)]
        HRESULT SetNodelockAlertLock([in] VARIANT_BOOL iLock);
        [id(0x6006000c), propget, helpcontext(0x00004e2a)]
        HRESULT Frequency([out, retval] float* oFrequency);
        [id(0x6006000c), propput, helpcontext(0x00004e2a)]
        HRESULT Frequency([in] float oFrequency);
        [id(0x6006000e), helpcontext(0x00004e2b)]
        HRESULT GetFrequencyInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x00004e2c)]
        HRESULT SetFrequencyLock([in] VARIANT_BOOL iLock);
        [id(0x60060010), propget, helpcontext(0x00004e2d)]
        HRESULT ShowLicense([out, retval] VARIANT_BOOL* oMode);
        [id(0x60060010), propput, helpcontext(0x00004e2d)]
        HRESULT ShowLicense([in] VARIANT_BOOL oMode);
        [id(0x60060012), helpcontext(0x00004e2e)]
        HRESULT GetShowLicenseInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060013), helpcontext(0x00004e2f)]
        HRESULT SetShowLicenseLock([in] VARIANT_BOOL iLock);
        [id(0x60060014), helpcontext(0x00004e30)]
        HRESULT GetLicensesList(
                        [in] long iDefaultLicenses, 
                        [out, retval] SAFEARRAY(VARIANT)* oTabDLName);
        [id(0x60060015), helpcontext(0x00004e31)]
        HRESULT GetGrantedLicensesList(
                        [in] long iDefaultLicenses, 
                        [out, retval] SAFEARRAY(VARIANT)* oTabDLName);
        [id(0x60060016), helpcontext(0x00004e32)]
        HRESULT GetLicensesListInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLock, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060017), helpcontext(0x00004e33)]
        HRESULT SetLicensesListLock([in] VARIANT_BOOL iLock);
        [id(0x60060018), helpcontext(0x00004e34)]
        HRESULT GetLicense(
                        [in] BSTR* iLicense, 
                        [out, retval] BSTR* oValue);
        [id(0x60060019), helpcontext(0x00004e35)]
        HRESULT SetLicense(
                        [in] BSTR* iLicense, 
                        [in] BSTR* iValue);
        [id(0x6006001a), helpcontext(0x00004e36)]
        HRESULT GetLicenseInfo(
                        [in] BSTR* iLicense, 
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001b), helpcontext(0x00004e37)]
        HRESULT SetLicenseLock(
                        [in] BSTR* iLicense, 
                        [in] VARIANT_BOOL iLock);
    };

    [
      odl,
      uuid(8776C0C8-B64A-4B81-A025-AA9D05EBD8DC),
      helpcontext(0x00004c2c),
      dual,
      oleautomation
    ]
    interface GlobalStatisticsSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00004c2d)]
        HRESULT MaxSizePerFile([out, retval] long* Size);
        [id(0x60060000), propput, helpcontext(0x00004c2d)]
        HRESULT MaxSizePerFile([in] long Size);
        [id(0x60060002), propget, helpcontext(0x00004c2e)]
        HRESULT MaxCopyFile([out, retval] long* oNb);
        [id(0x60060002), propput, helpcontext(0x00004c2e)]
        HRESULT MaxCopyFile([in] long oNb);
        [id(0x60060004), propget, helpcontext(0x00004c2f)]
        HRESULT BufferSize([out, retval] long* oSize);
        [id(0x60060004), propput, helpcontext(0x00004c2f)]
        HRESULT BufferSize([in] long oSize);
        [id(0x60060006), propget, helpcontext(0x00004c30)]
        HRESULT CopyDirectory([out, retval] BSTR* oCopyDir);
        [id(0x60060006), propput, helpcontext(0x00004c30)]
        HRESULT CopyDirectory([in] BSTR* oCopyDir);
        [id(0x60060008), helpcontext(0x00004c31)]
        HRESULT SetThematicsParameterLock([in] VARIANT_BOOL iLocked);
        [id(0x60060009), helpcontext(0x00004c32)]
        HRESULT GetThematicsParameterInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(9622F3C7-D939-44E0-85D0-122ADF6BAF9F),
      helpcontext(0x00004a38),
      dual,
      oleautomation
    ]
    interface GeneralStatisticsSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00004a39)]
        HRESULT Activation([out, retval] VARIANT_BOOL* oActivatationState);
        [id(0x60060000), propput, helpcontext(0x00004a39)]
        HRESULT Activation([in] VARIANT_BOOL oActivatationState);
        [id(0x60060002), propget, helpcontext(0x00004a3a)]
        HRESULT CumulationMode([out, retval] VARIANT_BOOL* oCumulative);
        [id(0x60060002), propput, helpcontext(0x00004a3a)]
        HRESULT CumulationMode([in] VARIANT_BOOL oCumulative);
        [id(0x60060004), helpcontext(0x00004a3b)]
        HRESULT GetFormatMode(
                        [in] long flag, 
                        [out, retval] VARIANT_BOOL* oFormatMode);
        [id(0x60060005), helpcontext(0x00004a3c)]
        HRESULT SetFormatMode(
                        [in] VARIANT_BOOL iFormatMode, 
                        [in] long flag);
        [id(0x60060006), propget, helpcontext(0x00004a3d)]
        HRESULT Output([out, retval] BSTR* oOutputType);
        [id(0x60060006), propput, helpcontext(0x00004a3d)]
        HRESULT Output([in] BSTR* oOutputType);
        [id(0x60060008), propget, helpcontext(0x00004a3e)]
        HRESULT OutputFile([out, retval] BSTR* oOutputFile);
        [id(0x60060008), propput, helpcontext(0x00004a3e)]
        HRESULT OutputFile([in] BSTR* oOutputFile);
        [id(0x6006000a), propget, helpcontext(0x00004a3f)]
        HRESULT THEM([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6006000a), propput, helpcontext(0x00004a3f)]
        HRESULT THEM([in] VARIANT_BOOL oStatus);
        [id(0x6006000c), propget, helpcontext(0x00004a40)]
        HRESULT TIME([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6006000c), propput, helpcontext(0x00004a40)]
        HRESULT TIME([in] VARIANT_BOOL oStatus);
        [id(0x6006000e), propget, helpcontext(0x00004a41)]
        HRESULT CPUS([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6006000e), propput, helpcontext(0x00004a41)]
        HRESULT CPUS([in] VARIANT_BOOL oStatus);
        [id(0x60060010), propget, helpcontext(0x00004a42)]
        HRESULT RTIM([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60060010), propput, helpcontext(0x00004a42)]
        HRESULT RTIM([in] VARIANT_BOOL oStatus);
        [id(0x60060012), propget, helpcontext(0x00004a43)]
        HRESULT ELPS([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60060012), propput, helpcontext(0x00004a43)]
        HRESULT ELPS([in] VARIANT_BOOL oStatus);
        [id(0x60060014), propget, helpcontext(0x00004a44)]
        HRESULT UPID([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60060014), propput, helpcontext(0x00004a44)]
        HRESULT UPID([in] VARIANT_BOOL oStatus);
        [id(0x60060016), propget, helpcontext(0x00004a45)]
        HRESULT USER([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60060016), propput, helpcontext(0x00004a45)]
        HRESULT USER([in] VARIANT_BOOL oStatus);
        [id(0x60060018), propget, helpcontext(0x00004a46)]
        HRESULT HOST([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60060018), propput, helpcontext(0x00004a46)]
        HRESULT HOST([in] VARIANT_BOOL oStatus);
        [id(0x6006001a), propget, helpcontext(0x00004a47)]
        HRESULT TimeUnit([out, retval] BSTR* iTimeUnit);
        [id(0x6006001a), propput, helpcontext(0x00004a47)]
        HRESULT TimeUnit([in] BSTR* iTimeUnit);
        [id(0x6006001c), propget, helpcontext(0x00004a48)]
        HRESULT DateFormat([out, retval] BSTR* iDateFormat);
        [id(0x6006001c), propput, helpcontext(0x00004a48)]
        HRESULT DateFormat([in] BSTR* iDateFormat);
        [id(0x6006001e), propget, helpcontext(0x00004a49)]
        HRESULT OutputFormat([out, retval] BSTR* iOutputFormat);
        [id(0x6006001e), propput, helpcontext(0x00004a49)]
        HRESULT OutputFormat([in] BSTR* iOutputFormat);
        [id(0x60060020), helpcontext(0x00004a4a)]
        HRESULT SetThematicsParameterLock([in] VARIANT_BOOL iLocked);
        [id(0x60060021), helpcontext(0x00004a4b)]
        HRESULT GetThematicsParameterInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(B6538743-5071-466D-995F-1B45FC4DDC4F),
      helpcontext(0x0000a7f8),
      dual,
      oleautomation
    ]
    interface WorkbenchStatisticsSettingAtt : GeneralStatisticsSettingAtt {
    };

    [
      odl,
      uuid(70CB465E-6218-4748-9B6C-3278E583160C),
      helpcontext(0x00007b0c),
      dual,
      oleautomation
    ]
    interface SessionStatisticsSettingAtt : GeneralStatisticsSettingAtt {
    };

    [
      odl,
      uuid(E7A22A29-82DB-43D4-A520-AE3FBA7F3E32),
      helpcontext(0x00007918),
      dual,
      oleautomation
    ]
    interface ServerStatisticsSettingAtt : GeneralStatisticsSettingAtt {
    };

    [
      odl,
      uuid(6294F41C-7B6A-427E-9460-F00DEDE45FBD),
      helpcontext(0x00005dc0),
      dual,
      oleautomation
    ]
    interface PCSStatisticsSettingAtt : GeneralStatisticsSettingAtt {
        [id(0x60070000), propget, helpcontext(0x00005dc1)]
        HRESULT MemUse([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070000), propput, helpcontext(0x00005dc1)]
        HRESULT MemUse([in] VARIANT_BOOL oStatus);
    };

    [
      odl,
      uuid(D670D072-119D-4C59-BFE2-3968D8C6D9E1),
      helpcontext(0x00003a98),
      dual,
      oleautomation
    ]
    interface ErrorlogStatisticsSettingAtt : GeneralStatisticsSettingAtt {
        [id(0x60070000), propget, helpcontext(0x00003a99)]
        HRESULT WKBN([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070000), propput, helpcontext(0x00003a99)]
        HRESULT WKBN([in] VARIANT_BOOL oStatus);
        [id(0x60070002), propget, helpcontext(0x00003a9a)]
        HRESULT CMND([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070002), propput, helpcontext(0x00003a9a)]
        HRESULT CMND([in] VARIANT_BOOL oStatus);
        [id(0x60070004), propget, helpcontext(0x00003a9b)]
        HRESULT MSGE([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070004), propput, helpcontext(0x00003a9b)]
        HRESULT MSGE([in] VARIANT_BOOL oStatus);
        [id(0x60070006), propget, helpcontext(0x00003a9c)]
        HRESULT ABND([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070006), propput, helpcontext(0x00003a9c)]
        HRESULT ABND([in] VARIANT_BOOL oStatus);
        [id(0x60070008), propget, helpcontext(0x00003a9d)]
        HRESULT CERR([out, retval] VARIANT_BOOL* oStatus);
        [id(0x60070008), propput, helpcontext(0x00003a9d)]
        HRESULT CERR([in] VARIANT_BOOL oStatus);
        [id(0x6007000a), propget, helpcontext(0x00003a9e)]
        HRESULT WARN([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6007000a), propput, helpcontext(0x00003a9e)]
        HRESULT WARN([in] VARIANT_BOOL oStatus);
        [id(0x6007000c), propget, helpcontext(0x00003a9f)]
        HRESULT COMT([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6007000c), propput, helpcontext(0x00003a9f)]
        HRESULT COMT([in] VARIANT_BOOL oStatus);
        [id(0x6007000e), propget, helpcontext(0x00003aa0)]
        HRESULT UREP([out, retval] VARIANT_BOOL* oStatus);
        [id(0x6007000e), propput, helpcontext(0x00003aa0)]
        HRESULT UREP([in] VARIANT_BOOL oStatus);
    };

    [
      odl,
      uuid(CE4E52C1-15A6-42F9-8485-929E04EB143D),
      helpcontext(0x00002af8),
      dual,
      oleautomation
    ]
    interface CommandStatisticsSettingAtt : GeneralStatisticsSettingAtt {
    };

    [
      odl,
      uuid(5C5B89F2-D4AE-4E93-A128-267ECA414934),
      helpcontext(0x00000bb8),
      dual,
      oleautomation
    ]
    interface AccesslogStatisticsSettingAtt : GeneralStatisticsSettingAtt {
    };

    [
      odl,
      uuid(46C31239-6252-4B02-BAB2-57F4F381EE9D),
      helpcontext(0x00004844),
      dual,
      oleautomation
    ]
    interface GeneralSessionSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00004845)]
        HRESULT UIStyle([out, retval] CATGenUIStyle* oUIStyle);
        [id(0x60060000), propput, helpcontext(0x00004845)]
        HRESULT UIStyle([in] CATGenUIStyle oUIStyle);
        [id(0x60060002), helpcontext(0x00004846)]
        HRESULT GetUIStyleInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00004847)]
        HRESULT SetUIStyleLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x00004848)]
        HRESULT AutoSave([out, retval] CATGenDataSave* oAutoSave);
        [id(0x60060004), propput, helpcontext(0x00004848)]
        HRESULT AutoSave([in] CATGenDataSave oAutoSave);
        [id(0x60060006), helpcontext(0x00004849)]
        HRESULT GetAutoSaveInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x0000484a)]
        HRESULT SetAutoSaveLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x0000484b)]
        HRESULT TimeRoll([out, retval] long* oTimeRoll);
        [id(0x60060008), propput, helpcontext(0x0000484b)]
        HRESULT TimeRoll([in] long oTimeRoll);
        [id(0x6006000a), propget, helpcontext(0x0000484c)]
        HRESULT RefDoc([out, retval] VARIANT_BOOL* oRefDoc);
        [id(0x6006000a), propput, helpcontext(0x0000484c)]
        HRESULT RefDoc([in] VARIANT_BOOL oRefDoc);
        [id(0x6006000c), helpcontext(0x0000484d)]
        HRESULT GetRefDocInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000d), helpcontext(0x0000484e)]
        HRESULT SetRefDocLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000e), propget, helpcontext(0x0000484f)]
        HRESULT Conferencing([out, retval] CATGenConferencing* oConf);
        [id(0x6006000e), propput, helpcontext(0x0000484f)]
        HRESULT Conferencing([in] CATGenConferencing oConf);
        [id(0x60060010), helpcontext(0x00004850)]
        HRESULT GetConferencingInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060011), helpcontext(0x00004851)]
        HRESULT SetConferencingLock([in] VARIANT_BOOL iLocked);
        [id(0x60060012), propget, helpcontext(0x00004852)]
        HRESULT DragDrop([out, retval] VARIANT_BOOL* oDragDrop);
        [id(0x60060012), propput, helpcontext(0x00004852)]
        HRESULT DragDrop([in] VARIANT_BOOL oDragDrop);
        [id(0x60060014), helpcontext(0x00004853)]
        HRESULT GetDragDropInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060015), helpcontext(0x00004854)]
        HRESULT SetDragDropLock([in] VARIANT_BOOL iLocked);
    };



    [
      odl,
      uuid(445CF052-2547-4CEC-BA72-117BB2769C16),
      helpcontext(0x000038a4),
      dual,
      oleautomation
    ]
    interface DynLicenseSettingAtt : SettingController {
        [id(0x60060000), helpcontext(0x000038a5)]
        HRESULT GetLicensesList([out, retval] SAFEARRAY(VARIANT)* oTabLic);
        [id(0x60060001), helpcontext(0x000038a6)]
        HRESULT GetLicensesListInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060002), helpcontext(0x000038a7)]
        HRESULT SetLicensesListLock([in] VARIANT_BOOL iLock);
        [id(0x60060003), helpcontext(0x000038a8)]
        HRESULT GetLicense(
                        [in] BSTR* iLicense, 
                        [out, retval] BSTR* oValue);
        [id(0x60060004), helpcontext(0x000038a9)]
        HRESULT SetLicense(
                        [in] BSTR* iLicense, 
                        [in] BSTR* iValue);
        [id(0x60060005), helpcontext(0x000038aa)]
        HRESULT GetLicenseInfo(
                        [in] BSTR* iLicense, 
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060006), helpcontext(0x000038ab)]
        HRESULT SetLicenseLock(
                        [in] BSTR* iLicense, 
                        [in] VARIANT_BOOL iLock);
    };

    [
      odl,
      uuid(C0932599-2B2A-49D2-ACCB-8F2D4CC0BDD8),
      helpcontext(0x000032c8),
      dual,
      oleautomation
    ]
    interface DocumentationSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x000032c9)]
        HRESULT TechnicalDocumentationPath([out, retval] BSTR* ioDocPath);
        [id(0x60060000), propput, helpcontext(0x000032c9)]
        HRESULT TechnicalDocumentationPath([in] BSTR* ioDocPath);
        [id(0x60060002), helpcontext(0x000032ca)]
        HRESULT GetTechnicalDocumentationPathInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x000032cb)]
        HRESULT SetTechnicalDocumentationPathLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x000032cc)]
        HRESULT DocLanguage([out, retval] long* oDocLang);
        [id(0x60060004), propput, helpcontext(0x000032cc)]
        HRESULT DocLanguage([in] long oDocLang);
        [id(0x60060006), helpcontext(0x000032cd)]
        HRESULT GetDocLanguageInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x000032ce)]
        HRESULT SetDocLanguageLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x000032cf)]
        HRESULT CompanionPath([out, retval] BSTR* ioUserCompPath);
        [id(0x60060008), propput, helpcontext(0x000032cf)]
        HRESULT CompanionPath([in] BSTR* ioUserCompPath);
        [id(0x6006000a), helpcontext(0x000032d0)]
        HRESULT GetCompanionPathInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x000032d1)]
        HRESULT SetCompanionPathLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), propget, helpcontext(0x000032d2)]
        HRESULT Priority([out, retval] CATDocContextualPriority* oPriority);
        [id(0x6006000c), propput, helpcontext(0x000032d2)]
        HRESULT Priority([in] CATDocContextualPriority oPriority);
        [id(0x6006000e), helpcontext(0x000032d3)]
        HRESULT GetPriorityInfo(
                        [in, out] BSTR* ioAdminLevel, 
                        [in, out] BSTR* ioLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x000032d4)]
        HRESULT SetPriorityLock([in] VARIANT_BOOL iLocked);
    };

    

    [
      odl,
      uuid(ABE7A03D-ACCD-0000-0280-03110E000000),
      helpcontext(0x00002ee0),
      dual,
      oleautomation
    ]
    interface DisconnectionSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00002ee1)]
        HRESULT ActivationState([out, retval] VARIANT_BOOL* oActivationState);
        [id(0x60060000), propput, helpcontext(0x00002ee1)]
        HRESULT ActivationState([in] VARIANT_BOOL oActivationState);
        [id(0x60060002), helpcontext(0x00002ee2)]
        HRESULT SetActivationStateLock([in] VARIANT_BOOL iLocked);
        [id(0x60060003), helpcontext(0x00002ee3)]
        HRESULT GetActivationStateInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060004), propget, helpcontext(0x00002ee4)]
        HRESULT InactivityDuration([out, retval] long* oMaxInactivity);
        [id(0x60060004), propput, helpcontext(0x00002ee4)]
        HRESULT InactivityDuration([in] long oMaxInactivity);
        [id(0x60060006), helpcontext(0x00002ee5)]
        HRESULT SetInactivityDurationLock([in] VARIANT_BOOL iLocked);
        [id(0x60060007), helpcontext(0x00002ee6)]
        HRESULT GetInactivityDurationInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(AA6065D3-6A9A-0000-0280-03110E000000),
      helpcontext(0x00002cec),
      dual,
      oleautomation
    ]
    interface DLNameSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00002ced)]
        HRESULT DLNameCreationRight([out, retval] VARIANT_BOOL* oAllowed);
        [id(0x60060000), propput, helpcontext(0x00002ced)]
        HRESULT DLNameCreationRight([in] VARIANT_BOOL oAllowed);
        [id(0x60060002), helpcontext(0x00002cee)]
        HRESULT SetDLNameCreationRightLock([in] VARIANT_BOOL iLocked);
        [id(0x60060003), helpcontext(0x00002cef)]
        HRESULT GetDLNameCreationRightInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060004), propget, helpcontext(0x00002cf0)]
        HRESULT RootDLNameCreationRight([out, retval] VARIANT_BOOL* oAllowed);
        [id(0x60060004), propput, helpcontext(0x00002cf0)]
        HRESULT RootDLNameCreationRight([in] VARIANT_BOOL oAllowed);
        [id(0x60060006), helpcontext(0x00002cf1)]
        HRESULT SetRootDLNameCreationRightLock([in] VARIANT_BOOL iLocked);
        [id(0x60060007), helpcontext(0x00002cf2)]
        HRESULT GetRootDLNameCreationRightInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060008), helpcontext(0x00002cf3)]
        HRESULT GetDLNameList([out, retval] SAFEARRAY(VARIANT)* oTabDLName);
        [id(0x60060009), helpcontext(0x00002cf4)]
        HRESULT GetDLNameSubList(
                        [in] BSTR* iDLName, 
                        [out, retval] SAFEARRAY(VARIANT)* oTabDLName);
        [id(0x6006000a), helpcontext(0x00002cf5)]
        HRESULT GetDLName(
                        [in] BSTR* iDLName, 
                        [in, out] BSTR* oRealNameUnix, 
                        [in, out] BSTR* oRealNameNT, 
                        [in, out] BSTR* oFather);
        [id(0x6006000b), helpcontext(0x00002cf6)]
        HRESULT GetDLNameExp(
                        [in] BSTR* iDLName, 
                        [in, out] BSTR* oRealNameUnix, 
                        [in, out] BSTR* oRealNameNT, 
                        [in, out] BSTR* oFather);
        [id(0x6006000c), helpcontext(0x00002cf7)]
        HRESULT SetDLName(
                        [in] BSTR* iDLName, 
                        [in] BSTR* iRealNameUnix, 
                        [in] BSTR* iRealNameNT, 
                        [in] BSTR* iFather, 
                        [in] VARIANT_BOOL iVerifDirectory);
        [id(0x6006000d), helpcontext(0x00002cf8)]
        HRESULT SetDLNameLock(
                        [in] BSTR* iDLName, 
                        [in] VARIANT_BOOL iLocked);
        [id(0x6006000e), helpcontext(0x00002cf9)]
        HRESULT GetDLNameInfo(
                        [in] BSTR* iDLName, 
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x00002cfa)]
        HRESULT RemoveDLName([in] BSTR* iDLName);
        [id(0x60060010), helpcontext(0x00002cfb)]
        HRESULT RenameDLName(
                        [in] BSTR* iDLName, 
                        [in] BSTR* iNewName);
    };

    [
      odl,
      uuid(8BA73233-1D0D-4BC1-ACC6-E31BD2BF3AE2),
      helpcontext(0x00001f40),
      dual,
      oleautomation
    ]
    interface CacheSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00001f41)]
        HRESULT ActivationMode([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x60060000), propput, helpcontext(0x00001f41)]
        HRESULT ActivationMode([in] VARIANT_BOOL oIsActive);
        [id(0x60060002), helpcontext(0x00001f42)]
        HRESULT SetActivationModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060003), helpcontext(0x00001f43)]
        HRESULT GetActivationModeInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060004), propget, helpcontext(0x00001f44)]
        HRESULT LocalPath([out, retval] BSTR* oLocalPath);
        [id(0x60060004), propput, helpcontext(0x00001f44)]
        HRESULT LocalPath([in] BSTR* oLocalPath);
        [id(0x60060006), helpcontext(0x00001f45)]
        HRESULT SetLocalPathLock([in] VARIANT_BOOL iLocked);
        [id(0x60060007), helpcontext(0x00001f46)]
        HRESULT GetLocalPathInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060008), helpcontext(0x00001f47)]
        HRESULT GetReleasePath([out, retval] SAFEARRAY(VARIANT)* oRelPath);
        [id(0x60060009), helpcontext(0x00001f48)]
        HRESULT PutReleasePath([in] SAFEARRAY(VARIANT) iRelPath);
        [id(0x6006000a), helpcontext(0x00001f49)]
        HRESULT SetReleasePathLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000b), helpcontext(0x00001f4a)]
        HRESULT GetReleasePathInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* Locked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000c), propget, helpcontext(0x00001f4b)]
        HRESULT SizeControl([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x6006000c), propput, helpcontext(0x00001f4b)]
        HRESULT SizeControl([in] VARIANT_BOOL oIsActive);
        [id(0x6006000e), helpcontext(0x00001f4c)]
        HRESULT SetSizeControlLock([in] VARIANT_BOOL iLocked);
        [id(0x6006000f), helpcontext(0x00001f4d)]
        HRESULT GetSizeControlInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060010), propget, helpcontext(0x00001f4e)]
        HRESULT CacheMaxSizeMo([out, retval] long* oValue);
        [id(0x60060010), propput, helpcontext(0x00001f4e)]
        HRESULT CacheMaxSizeMo([in] long oValue);
        [id(0x60060012), helpcontext(0x00001f4f)]
        HRESULT SetCacheMaxSizeMoLock([in] VARIANT_BOOL iLocked);
        [id(0x60060013), helpcontext(0x00001f50)]
        HRESULT GetCacheMaxSizeMoInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060014), propget, helpcontext(0x00001f51)]
        HRESULT TimestampMode([out, retval] VARIANT_BOOL* oTimeStampOn);
        [id(0x60060014), propput, helpcontext(0x00001f51)]
        HRESULT TimestampMode([in] VARIANT_BOOL oTimeStampOn);
        [id(0x60060016), helpcontext(0x00001f52)]
        HRESULT SetTimestampModeLock([in] VARIANT_BOOL iLocked);
        [id(0x60060017), helpcontext(0x00001f53)]
        HRESULT GetTimestampModeInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060018), propget, helpcontext(0x00001f54)]
        HRESULT UTCTimeFormat([out, retval] VARIANT_BOOL* oTimeStampOn);
        [id(0x60060018), propput, helpcontext(0x00001f54)]
        HRESULT UTCTimeFormat([in] VARIANT_BOOL oTimeStampOn);
        [id(0x6006001a), helpcontext(0x00001f55)]
        HRESULT SetUTCTimeFormatLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001b), helpcontext(0x00001f56)]
        HRESULT GetUTCTimeFormatInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006001c), propget, helpcontext(0x00001f57)]
        HRESULT LODMode([out, retval] VARIANT_BOOL* oMode);
        [id(0x6006001c), propput, helpcontext(0x00001f57)]
        HRESULT LODMode([in] VARIANT_BOOL oMode);
        [id(0x6006001e), helpcontext(0x00001f58)]
        HRESULT SetLODModeLock([in] VARIANT_BOOL iLocked);
        [id(0x6006001f), helpcontext(0x00001f59)]
        HRESULT GetLODModeInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060020), propget, helpcontext(0x00001f5a)]
        HRESULT ReleasedVoxel([out, retval] float* oVoxel);
        [id(0x60060020), propput, helpcontext(0x00001f5a)]
        HRESULT ReleasedVoxel([in] float oVoxel);
        [id(0x60060022), helpcontext(0x00001f5b)]
        HRESULT SetReleasedVoxelLock([in] VARIANT_BOOL iLocked);
        [id(0x60060023), helpcontext(0x00001f5c)]
        HRESULT GetReleasedVoxelInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
    };

    [
      odl,
      uuid(D402B65D-7BED-4E55-A950-91A38DE2D45C),
      helpcontext(0x00001d4c),
      dual,
      oleautomation
    ]
    interface CGRAdhesionSettingAtt : SettingController {
        [id(0x60060000), propget, helpcontext(0x00001d4d)]
        HRESULT V4_Model_CommentPage([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x60060000), propput, helpcontext(0x00001d4d)]
        HRESULT V4_Model_CommentPage([in] VARIANT_BOOL oIsActive);
        [id(0x60060002), helpcontext(0x00001d4e)]
        HRESULT GetV4_Model_CommentPageInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060003), helpcontext(0x00001d4f)]
        HRESULT SetV4_Model_CommentPageLock([in] VARIANT_BOOL iLocked);
        [id(0x60060004), propget, helpcontext(0x00001d50)]
        HRESULT V4_Model_LnF([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x60060004), propput, helpcontext(0x00001d50)]
        HRESULT V4_Model_LnF([in] VARIANT_BOOL oIsActive);
        [id(0x60060006), helpcontext(0x00001d51)]
        HRESULT GetV4_Model_LnFInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060007), helpcontext(0x00001d52)]
        HRESULT SetV4_Model_LnFLock([in] VARIANT_BOOL iLocked);
        [id(0x60060008), propget, helpcontext(0x00001d53)]
        HRESULT V5_SPA([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x60060008), propput, helpcontext(0x00001d53)]
        HRESULT V5_SPA([in] VARIANT_BOOL oIsActive);
        [id(0x6006000a), helpcontext(0x00001d54)]
        HRESULT GetV5_SPAInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000b), helpcontext(0x00001d55)]
        HRESULT SetV5_SPALock([in] VARIANT_BOOL iLocked);
        [id(0x6006000c), propget, helpcontext(0x00001d56)]
        HRESULT V4V5_FDT([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x6006000c), propput, helpcontext(0x00001d56)]
        HRESULT V4V5_FDT([in] VARIANT_BOOL oIsActive);
        [id(0x6006000e), helpcontext(0x00001d57)]
        HRESULT GetV4V5_FDTInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x6006000f), helpcontext(0x00001d58)]
        HRESULT SetV4V5_FDTLock([in] VARIANT_BOOL iLocked);
        [id(0x60060010), propget, helpcontext(0x00001d59)]
        HRESULT Voxels([out, retval] VARIANT_BOOL* oIsActive);
        [id(0x60060010), propput, helpcontext(0x00001d59)]
        HRESULT Voxels([in] VARIANT_BOOL oIsActive);
        [id(0x60060012), helpcontext(0x00001d5a)]
        HRESULT GetVoxelsInfo(
                        [in, out] BSTR* AdminLevel, 
                        [in, out] BSTR* oLocked, 
                        [out, retval] VARIANT_BOOL* oModified);
        [id(0x60060013), helpcontext(0x00001d5b)]
        HRESULT SetVoxelsLock([in] VARIANT_BOOL iLocked);
    };

    [
      odl,
      uuid(08C3A5DD-5EE3-45DA-A99E-0DAD92FF74F7),
      helpcontext(0x00007530),
      dual,
      oleautomation
    ]
    interface SelectionSets : AnyObject {
        [id(0x60050000), helpcontext(0x00007531)]
        HRESULT GetListOfSelectionSet([in, out] SAFEARRAY(VARIANT) oListOfSelectionSet);
        [id(0x60050001), helpcontext(0x00007532)]
        HRESULT CreateSelectionSet([in] BSTR* iSelSetName);
        [id(0x60050002), helpcontext(0x00007533)]
        HRESULT DeleteSelectionSet([in] BSTR* iSelSetName);
        [id(0x60050003), helpcontext(0x00007534)]
        HRESULT AddCSOIntoSelectionSet([in] BSTR* iSelSetName);
        [id(0x60050004), helpcontext(0x00007535)]
        HRESULT PutSelectionSetIntoCSO([in] BSTR* iSelSetName);
        [id(0x60050005), helpcontext(0x00007536)]
        HRESULT RenameSelectionSet(
                        [in] BSTR* iOldSelSetName, 
                        [in] BSTR* iNewSelSetName);
    };

    [
      odl,
      uuid(79FB72D7-28CE-11D5-9074-0004AC96EF3C),
      helpcontext(0x000036b0),
      dual,
      oleautomation
    ]
    interface DraftingPageSetup : PageSetup {
        [id(0x60060000), propget, helpcontext(0x000036b1)]
        HRESULT ChooseBestOrientation([out, retval] VARIANT_BOOL* oBestOrientationOn);
        [id(0x60060000), propput, helpcontext(0x000036b1)]
        HRESULT ChooseBestOrientation([in] VARIANT_BOOL oBestOrientationOn);
        [id(0x60060002), propget, helpcontext(0x000036b2)]
        HRESULT FitToPrinterFormat([out, retval] VARIANT_BOOL* oFitToPrinterFormatOn);
        [id(0x60060002), propput, helpcontext(0x000036b2)]
        HRESULT FitToPrinterFormat([in] VARIANT_BOOL oFitToPrinterFormatOn);
        [id(0x60060004), propget, helpcontext(0x000036b3)]
        HRESULT FitToSheetFormat([out, retval] VARIANT_BOOL* oFitToSheetFormatOn);
        [id(0x60060004), propput, helpcontext(0x000036b3)]
        HRESULT FitToSheetFormat([in] VARIANT_BOOL oFitToSheetFormatOn);
    };

    [
      odl,
      uuid(8DB9CA92-9403-11D1-A5E2-00A0C95AF74C),
      helpcontext(0x00005bcc),
      dual,
      oleautomation
    ]
    interface Move : AnyObject {
        [id(0x60050000), propget, helpcontext(0x00005bcd)]
        HRESULT MovableObject([out, retval] Move** oMovable);
        [id(0x60050001), helpcontext(0x00005bce)]
        HRESULT Apply([in] SAFEARRAY(VARIANT) iTransformationArray);
    };

    [
      odl,
      uuid(50884DF4-9405-11D1-A5E2-00A0C95AF74C),
      helpcontext(0x000061a8),
      dual,
      oleautomation
    ]
    interface Position : Move {
        [id(0x60060000), helpcontext(0x000061a9)]
        HRESULT SetComponents([in] SAFEARRAY(VARIANT) iAxisComponentsArray);
        [id(0x60060001), helpcontext(0x000061aa)]
        HRESULT GetComponents([in, out] SAFEARRAY(VARIANT) oAxisComponentsArray);
    };

    [
      odl,
      uuid(80BA692E-035F-0000-0280-030BA6000000),
      helpcontext(0x0000251c),
      dual,
      oleautomation
    ]
    interface Camera3D : Camera {
        [id(0x60060000), propget, helpcontext(0x0000251d)]
        HRESULT Viewpoint3D([out, retval] Viewpoint3D** oViewpoint);
        [id(0x60060000), propput, helpcontext(0x0000251d)]
        HRESULT Viewpoint3D([in] Viewpoint3D* oViewpoint);
    };

    [
      odl,
      uuid(80BA68DD-8934-0000-0280-030BA6000000),
      helpcontext(0x00002328),
      dual,
      oleautomation
    ]
    interface Camera2D : Camera {
        [id(0x60060000), propget, helpcontext(0x00002329)]
        HRESULT Viewpoint2D([out, retval] Viewpoint2D** oViewpoint);
        [id(0x60060000), propput, helpcontext(0x00002329)]
        HRESULT Viewpoint2D([in] Viewpoint2D* oViewpoint);
    };

    typedef [public]
    AccesslogStatisticsSettingAtt* CATIAAccesslogStatisticsSettingAtt;

    typedef [public]
    AnyObject* CATIABase;

    typedef [public]
    Application* CATIAApplication;

    typedef [public]
    Attachments* CATIAAttachments;

    typedef [public]
    Batch* CATIABatch;

    typedef [public]
    BatchElement* CATIABatchElement;

    typedef [public]
    BatchElements* CATIABatchElements;

    typedef [public]
    BatchLog* CATIABatchLog;

    typedef [public]
    BatchOutput* CATIABatchOutput;

    typedef [public]
    CGRAdhesionSettingAtt* CATIACGRAdhesionSettingAtt;

    typedef [public]
    CacheSettingAtt* CATIACacheSettingAtt;

    typedef [public]
    Camera* CATIACamera;

    typedef [public]
    Camera2D* CATIACamera2D;

    typedef [public]
    Camera3D* CATIACamera3D;

    typedef [public]
    Cameras* CATIACameras;

    typedef [public]
    Collection* CATIACollection;

    typedef [public]
    CommandStatisticsSettingAtt* CATIACommandStatisticsSettingAtt;

    typedef [public]
    DLNameSettingAtt* CATIADLNameSettingAtt;

    typedef [public]
    DisconnectionSettingAtt* CATIADisconnectionSettingAtt;

    typedef [public]
    Document* CATIADocument;

    typedef [public]
    DocumentationSettingAtt* CATIADocumentationSettingAtt;

    typedef [public]
    Documents* CATIADocuments;

    typedef [public]
    DraftingPageSetup* CATIADraftingPageSetup;

    typedef [public]
    DynLicenseSettingAtt* CATIADynLicenseSettingAtt;

    typedef [public]
    ErrorlogStatisticsSettingAtt* CATIAErrorlogStatisticsSettingAtt;

    typedef [public]
    File* CATIAFile;

    typedef [public]
    FileComponent* CATIAFileComponent;

    typedef [public]
    FileSystem* CATIAFileSystem;

    typedef [public]
    Files* CATIAFiles;

    typedef [public]
    Folder* CATIAFolder;

    typedef [public]
    Folders* CATIAFolders;

    typedef [public]
    GeneralSessionSettingAtt* CATIAGeneralSessionSettingAtt;

    typedef [public]
    GeneralStatisticsSettingAtt* CATIAGeneralStatisticsSettingAtt;

    typedef [public]
    GlobalStatisticsSettingAtt* CATIAGlobalStatisticsSettingAtt;

    typedef [public]
    LicenseSettingAtt* CATIALicenseSettingAtt;

    typedef [public]
    LightSource* CATIALightSource;

    typedef [public]
    LightSources* CATIALightSources;

    typedef [public]
    MacrosSettingAtt* CATIAMacrosSettingAtt;

    typedef [public]
    Mail* CATIAMail;

    typedef [public]
    MemoryWarningSettingAtt* CATIAMemoryWarningSettingAtt;

    typedef [public]
    ModelElement* CATIAModelElement;

    typedef [public]
    Move* CATIAMove;

    typedef [public]
    PCSStatisticsSettingAtt* CATIAPCSStatisticsSettingAtt;

    typedef [public]
    PageSetup* CATIAPageSetup;

    typedef [public]
    Position* CATIAPosition;

    typedef [public]
    Printer* CATIAPrinter;

    typedef [public]
    Printers* CATIAPrinters;

    typedef [public]
    PrintersSettingAtt* CATIAPrintersSettingAtt;

    typedef [public]
    Recipients* CATIARecipients;

    typedef [public]
    Reference* CATIAReference;

    typedef [public]
    References* CATIAReferences;

    typedef [public]
    SearchSettingAtt* CATIASearchSettingAtt;

    typedef [public]
    SelectedElement* CATIASelectedElement;

    typedef [public]
    Selection* CATIASelection;

    typedef [public]
    SelectionSets* CATIASelectionSets;

    typedef [public]
    SendToService* CATIASendToService;

    typedef [public]
    ServerStatisticsSettingAtt* CATIAServerStatisticsSettingAtt;

    typedef [public]
    SessionStatisticsSettingAtt* CATIASessionStatisticsSettingAtt;

    typedef [public]
    Setting* CATIASetting;

    typedef [public]
    SettingController* CATIASettingController;

    typedef [public]
    SettingControllers* CATIASettingControllers;

    typedef [public]
    Settings* CATIASettings;

    typedef [public]
    SpecsAndGeomWindow* CATIASpecsAndGeomWindow;

    typedef [public]
    SpecsViewer* CATIASpecsViewer;

    typedef [public]
    SystemConfiguration* CATIASystemConfiguration;

    typedef [public]
    SystemService* CATIASystemService;

    typedef [public]
    TextStream* CATIATextStream;

    typedef [public]
    TreeVizManipSettingAtt* CATIATreeVizManipSettingAtt;

    typedef [public]
    Viewer* CATIAViewer;

    typedef [public]
    Viewer2D* CATIAViewer2D;

    typedef [public]
    Viewer3D* CATIAViewer3D;

    typedef [public]
    Viewers* CATIAViewers;

    typedef [public]
    Viewpoint2D* CATIAViewpoint2D;

    typedef [public]
    Viewpoint3D* CATIAViewpoint3D;

    typedef [public]
    VisPropertySet* CATIAVisPropertySet;

    typedef [public]
    VisualizationSettingAtt* CATIAVisualizationSettingAtt;

    typedef [public]
    VrmlSettingAtt* CATIAVrmlSettingAtt;

    typedef [public]
    Window* CATIAWindow;

    typedef [public]
    Windows* CATIAWindows;

    typedef [public]
    Workbench* CATIAWorkbench;

    typedef [public]
    WorkbenchStatisticsSettingAtt* CATIAWorkbenchStatisticsSettingAtt;

    

    [
      dllname("foo.dll")
    ]
    module IID_InfInterfaces {
        const LPSTR IID_CATBaseUnknown = "7bf8be41-8074-0000-0280-020bcb000000";
        const LPSTR IID_CATBaseDispatch = "7cdb17ca-91c1-0000-0280-020bcb000000";
        const LPSTR IID_ModelElement = "7a4b1870-c639-11d6-8055-0010b5fa1031";
        const LPSTR IID_Collection = "91d1d553-495c-11d1-a26e-0000f87546fd";
        const LPSTR IID_Windows = "7fbd96b9-3fa0-0000-0280-030ba6000000";
        const LPSTR IID_Viewers = "80ba53e7-7fcb-0000-0280-030ba6000000";
        const LPSTR IID_Settings = "00855d50-abc1-11d6-be9f-000347d06ca1";
        const LPSTR IID_SettingControllers = "a66e17f5-132a-0000-0280-03110e000000";
        const LPSTR IID_References = "2636c5b8-4f03-11d1-a26f-0000f87546fd";
        const LPSTR IID_Printers = "db6de164-1739-11d3-b806-0008c73f2494";
        const LPSTR IID_LightSources = "80ba6760-fb5e-0000-0280-030ba6000000";
        const LPSTR IID_Folders = "3e2466d0-c450-11d3-b85c-0008c7191ea2";
        const LPSTR IID_Files = "1aec8328-c454-11d3-b85c-0008c7191ea2";
        const LPSTR IID_Documents = "7fbd9be6-3cbe-0000-0280-030ba6000000";
        const LPSTR IID_Cameras = "80ba682e-7c1b-0000-0280-030ba6000000";
        const LPSTR IID_BatchElements = "ce7baca0-fb45-11d3-9ee1-00508b675233";
        const LPSTR IID_AnyObject = "7faff68c-2e6a-0000-0280-020aef000000";
        const LPSTR IID_Workbench = "8735e747-0d55-0000-0280-030b09000000";
        const LPSTR IID_Window = "7fbd9ab0-6840-0000-0280-030ba6000000";
        const LPSTR IID_SpecsAndGeomWindow = "80eca576-04f4-0000-0280-030ba6000000";
        const LPSTR IID_VisPropertySet = "69274990-9dbe-11d4-a74b-0004ac37ae57";
        const LPSTR IID_Viewpoint3D = "809b55ca-39cc-0000-0280-030ba6000000";
        const LPSTR IID_Viewpoint2D = "80ba69b0-6ca4-0000-0280-030ba6000000";
        const LPSTR IID_Viewer = "80ba5f08-1dab-0000-0280-030ba6000000";
        const LPSTR IID_Viewer3D = "7f8c8382-d814-0000-0280-030ba6000000";
        const LPSTR IID_Viewer2D = "80ba7f3c-060b-0000-0280-030ba6000000";
        const LPSTR IID_SpecsViewer = "80eca4e1-790b-0000-0280-030ba6000000";
        const LPSTR IID_TextStream = "21e56fa8-c455-11d3-b85c-0008c7191ea2";
        const LPSTR IID_SystemService = "010508c6-7218-11d1-a5ee-00a0c9575177";
        const LPSTR IID_SystemConfiguration = "ba6addf0-6e41-11d6-8051-0010b5fa1031";
        const LPSTR IID_SettingController = "12ce8949-0ca6-4564-8c5f-dab2710e4d69";
        const LPSTR IID_VrmlSettingAtt = "687cdf4e-5490-4d2b-8abb-4224d607c2f6";
        const LPSTR IID_VisualizationSettingAtt = "c5a3063a-9db3-4c71-bff9-630dcfe22b33";
        const LPSTR IID_TreeVizManipSettingAtt = "67ff8de5-294f-4b50-be3f-27e6d6498d84";
        const LPSTR IID_SearchSettingAtt = "fca1e9f8-ec62-4e5a-8678-2783b0e7b192";
        const LPSTR IID_PrintersSettingAtt = "401dd642-b5cf-486f-b237-b471f97a9dc0";
        const LPSTR IID_MemoryWarningSettingAtt = "abed1e5f-011a-0000-0280-03110e000000";
        const LPSTR IID_MacrosSettingAtt = "ebb4b244-54f1-4785-ab69-0abd662347da";
        const LPSTR IID_LicenseSettingAtt = "f795b0aa-3c3b-42f6-b0c2-5f5a0cbdffa1";
        const LPSTR IID_GlobalStatisticsSettingAtt = "8776c0c8-b64a-4b81-a025-aa9d05ebd8dc";
        const LPSTR IID_GeneralStatisticsSettingAtt = "9622f3c7-d939-44e0-85d0-122adf6baf9f";
        const LPSTR IID_WorkbenchStatisticsSettingAtt = "b6538743-5071-466d-995f-1b45fc4ddc4f";
        const LPSTR IID_SessionStatisticsSettingAtt = "70cb465e-6218-4748-9b6c-3278e583160c";
        const LPSTR IID_ServerStatisticsSettingAtt = "e7a22a29-82db-43d4-a520-ae3fba7f3e32";
        const LPSTR IID_PCSStatisticsSettingAtt = "6294f41c-7b6a-427e-9460-f00dede45fbd";
        const LPSTR IID_ErrorlogStatisticsSettingAtt = "d670d072-119d-4c59-bfe2-3968d8c6d9e1";
        const LPSTR IID_CommandStatisticsSettingAtt = "ce4e52c1-15a6-42f9-8485-929e04eb143d";
        const LPSTR IID_AccesslogStatisticsSettingAtt = "5c5b89f2-d4ae-4e93-a128-267eca414934";
        const LPSTR IID_GeneralSessionSettingAtt = "46c31239-6252-4b02-bab2-57f4f381ee9d";
        const LPSTR IID_DynLicenseSettingAtt = "445cf052-2547-4cec-ba72-117bb2769c16";
        const LPSTR IID_DocumentationSettingAtt = "c0932599-2b2a-49d2-accb-8f2d4cc0bdd8";
        const LPSTR IID_DisconnectionSettingAtt = "abe7a03d-accd-0000-0280-03110e000000";
        const LPSTR IID_DLNameSettingAtt = "aa6065d3-6a9a-0000-0280-03110e000000";
        const LPSTR IID_CacheSettingAtt = "8ba73233-1d0d-4bc1-acc6-e31bd2bf3ae2";
        const LPSTR IID_CGRAdhesionSettingAtt = "d402b65d-7bed-4e55-a950-91a38de2d45c";
        const LPSTR IID_Setting = "082b1347-9b29-458f-a757-d5a2466252f0";
        const LPSTR IID_SendToService = "963c65ab-5a4a-0000-0280-030ec7000000";
        const LPSTR IID_SelectionSets = "08c3a5dd-5ee3-45da-a99e-0dad92ff74f7";
        const LPSTR IID_Selection = "816aad14-c5e5-0000-0280-030d3b000000";
        const LPSTR IID_SelectedElement = "6ef9ead4-7378-11d4-85b4-00508b675233";
        const LPSTR IID_Reference = "81799037-b0f2-0000-0280-030d3b000000";
        const LPSTR IID_Recipients = "0267a658-2949-11d3-b051-006094eb7ce3";
        const LPSTR IID_Printer = "a5b37198-1729-11d3-b806-0008c73f2494";
        const LPSTR IID_PageSetup = "7fbd9b52-c961-0000-0280-030ba6000000";
        const LPSTR IID_DraftingPageSetup = "79fb72d7-28ce-11d5-9074-0004ac96ef3c";
        const LPSTR IID_Move = "8db9ca92-9403-11d1-a5e2-00a0c95af74c";
        const LPSTR IID_Position = "50884df4-9405-11d1-a5e2-00a0c95af74c";
        const LPSTR IID_Mail = "febdaaae-2946-11d3-b051-006094eb7ce3";
        const LPSTR IID_LightSource = "80ba67b5-bbab-0000-0280-030ba6000000";
        const LPSTR IID_FileSystem = "c1d63cb8-c455-11d3-b85c-0008c7191ea2";
        const LPSTR IID_FileComponent = "01c7eb5c-a78a-11d5-85d4-00508b675233";
        const LPSTR IID_Folder = "c324bbb0-c44e-11d3-b85c-0008c7191ea2";
        const LPSTR IID_File = "caff2870-c44a-11d3-b85c-0008c7191ea2";
        const LPSTR IID_Document = "7fbd9d5a-cfba-0000-0280-030ba6000000";
        const LPSTR IID_Camera = "80ba687f-12ce-0000-0280-030ba6000000";
        const LPSTR IID_Camera3D = "80ba692e-035f-0000-0280-030ba6000000";
        const LPSTR IID_Camera2D = "80ba68dd-8934-0000-0280-030ba6000000";
        const LPSTR IID_BatchOutput = "dfae992c-d4ff-11d4-85bb-00508b675233";
        const LPSTR IID_BatchLog = "1c16baac-d500-11d4-85bb-00508b675233";
        const LPSTR IID_BatchElement = "1cea9860-fb46-11d3-9ee1-00508b675233";
        const LPSTR IID_Batch = "fed51760-fb45-11d3-9ee1-00508b675233";
        const LPSTR IID_Attachments = "50305e98-2949-11d3-b051-006094eb7ce3";
        const LPSTR IID_Application = "7d2c8116-dc44-0000-0280-030ba6000000";
    };
};
